{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":315,\"hp\":25,\"max_hp\":25,\"strength\":59,\"defense\":159,\"dexterity\":91,\"agility\":12,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"hacking_exp\":9870383.117619203,\"strength_exp\":2807.639999999775,\"defense_exp\":74596.43999999808,\"dexterity_exp\":8537.880000001183,\"agility_exp\":239.48000000000218,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"money\":705570490485.1713,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"xtra\",\"serv1\",\"serv2\",\"serv3\",\"serv4\",\"serv5\",\"serv6\",\"serv7\",\"serv8\",\"serv9\",\"serv10\",\"serv11\",\"serv12\",\"serv0\",\"serv13\",\"serv14\",\"serv15\",\"serv16\",\"serv17\",\"serv18\",\"serv19\",\"serv20\",\"serv-1\",\"serv\",\"serv-0\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":6136588.000001043,\"ram\":64,\"totalMoneyGenerated\":53264499352.82228,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":6136238.000001041,\"ram\":64,\"totalMoneyGenerated\":53264048923.01796,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":6135638.200001039,\"ram\":64,\"totalMoneyGenerated\":53214398268.529076,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":5963385.000000906,\"ram\":64,\"totalMoneyGenerated\":53194213937.14178,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":5714925.199999981,\"ram\":64,\"totalMoneyGenerated\":52412925014.81543,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":5714924.59999998,\"ram\":64,\"totalMoneyGenerated\":52412922936.16198,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":5712338.199999981,\"ram\":64,\"totalMoneyGenerated\":52389453773.835625,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":5712270.79999998,\"ram\":64,\"totalMoneyGenerated\":52388916379.69963,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":5712270.79999998,\"ram\":64,\"totalMoneyGenerated\":52388905196.81877,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":5712270.599999981,\"ram\":64,\"totalMoneyGenerated\":52388888750.56219,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":5712270.399999981,\"ram\":64,\"totalMoneyGenerated\":52388869040.75673,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":5712270.199999981,\"ram\":64,\"totalMoneyGenerated\":52388845782.42759,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2620.3740607636723,\"onlineTimeSeconds\":5712269.99999998,\"ram\":64,\"totalMoneyGenerated\":14968235020.646067,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2620.3740607636723,\"onlineTimeSeconds\":5712269.99999998,\"ram\":64,\"totalMoneyGenerated\":14968232865.846817,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":192,\"moneyGainRatePerSecond\":319.31074799999993,\"onlineTimeSeconds\":5712267.79999998,\"ram\":4,\"totalMoneyGenerated\":1823982502.5408807,\"name\":\"hacknet-node-14\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"NiteSec\",\"Volhaven\",\"Netburners\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1,\"crime_success_mult\":1,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1649014285600,\"lastSave\":1649014284520,\"totalPlaytime\":6137155800,\"playtimeSinceLastAug\":6137155800,\"playtimeSinceLastBitnode\":6137155800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-25776424.799989045,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":51546170645.90602,\"hacknet\":663857337745.7124,\"hacknet_expenses\":-5020013711.146625,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":705570489485.1713,\"work\":0,\"servers\":-2167338016.5950418,\"other\":-310800000,\"augmentations\":-2309090753.8648076}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-25776424.799989045,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":51546170645.90602,\"hacknet\":663857337745.7124,\"hacknet_expenses\":-5020013711.146625,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":705570489485.1713,\"work\":0,\"servers\":-2167338016.5950418,\"other\":-310800000,\"augmentations\":-2309090753.8648076}},\"scriptProdSinceLastAug\":4561290185,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642877740277},{\"ID\":\"NS2\",\"unlockedOn\":1642877860298},{\"ID\":\"FROZE\",\"unlockedOn\":1642884024228},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642885790405},{\"ID\":\"TOR\",\"unlockedOn\":1642886690426},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642922607369},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642923927363},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642926327291},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642928787287},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1643216708521},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1643216708547},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1643216768501},{\"ID\":\"WORKOUT\",\"unlockedOn\":1643221208497},{\"ID\":\"NITESEC\",\"unlockedOn\":1643222468505},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1643299455458}],\"terminalCommandHistory\":[],\"identifier\":\"1d074417269a5f\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"32.6.9.9\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f890a769-15d8-4be8-b9c4-9a7dbbe47b81\",\"moduleSequenceNumber\":539},{\"filename\":\"serverInfos.js\",\"url\":\"blob:file:///abcd3616-14a9-48ba-af25-ce7f01b6f94f\",\"moduleSequenceNumber\":8985}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"home\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst myServers = 13;\\n\\n\\tfor(var i = 0; i < 13; i++) {\\n\\t\\tns.connect(\\\"serv\\\" + i);\\n\\t\\tns.run(\\\"run.js\\\", 1, \\\"256\\\");\\n\\t\\tns.connect(\\\"home\\\");\\n\\t}\\n}\",\"filename\":\"dev.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"dev.js\",\"url\":\"blob:file:///787a6944-ad28-4ef7-a521-601671bd2eca\",\"moduleSequenceNumber\":4164}],\"dependents\":[],\"ramUsage\":34.6,\"server\":\"home\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n\\tvar file = ns.read(\\\"myserv.txt\\\");\\n\\tvar servers = file.split(\\\"\\\\r\\\\n\\\");\\n\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    for(var i = 0; i < servers.length; i++) {\\n        var server = servers[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"download.js\",\"url\":\"blob:file:///854e4d4f-99f8-4cd6-9b6d-f4122b1678bb\",\"moduleSequenceNumber\":3813}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\r\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f1226a37-9c0f-4d30-853a-aaa693dbd91f\",\"moduleSequenceNumber\":47835}],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"home\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7fc22ae1-e165-4dea-b666-93f09d62e5ca\",\"moduleSequenceNumber\":539},{\"filename\":\"install.js\",\"url\":\"blob:file:///319ead45-26c7-41fa-a2e8-efbc9fc13aae\",\"moduleSequenceNumber\":8986}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0ed07d08-32e1-40cb-8b10-5567603e9365\",\"moduleSequenceNumber\":47835},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///84f84420-e3a9-4747-8f73-99e079cf6873\",\"moduleSequenceNumber\":47835},{\"filename\":\"run.js\",\"url\":\"blob:file:///befece62-822b-45bd-966c-4955085dacb4\",\"moduleSequenceNumber\":51318}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"home\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c83b9651-d8f9-423b-b1f4-7862797cad6a\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///61ca85f2-24de-44f7-8e3b-40d2e808f8d8\",\"moduleSequenceNumber\":1076}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///3aa803be-0d2a-471c-bc06-6621ced7879b\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///021d5b57-963a-4a1e-b9c1-7bc8f99f6ac1\",\"moduleSequenceNumber\":1075}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b7a0a2a4-37d3-4f99-b163-b55386e37cdd\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///d0d8c354-3281-4e4a-b60c-d87e7ad8b89a\",\"moduleSequenceNumber\":1074}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a5e99985-ca2a-4084-8217-59798f5048c2\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///c6f08c75-b155-4b4d-9244-92ea09811e41\",\"moduleSequenceNumber\":1073}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9c15ce38-b7eb-4945-9c75-faa76ead9e20\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///4bbd61b2-2378-4aca-99ba-354698f96c9d\",\"moduleSequenceNumber\":1071}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///32eb89a2-2000-40f2-bbe1-b2b5e8a35bc7\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///1c9eee6a-27d8-488e-ba67-4b9b0c88a014\",\"moduleSequenceNumber\":1072}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///58adfd95-4d0b-4fbc-a1df-c74f09d886eb\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///d5c8a79a-8e0a-4993-ba3e-caddf763a84b\",\"moduleSequenceNumber\":1077}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///902b0bf4-2406-4164-949d-de96a1f5fd8b\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///61bcd61a-47fc-4d21-8c42-d3e63a884088\",\"moduleSequenceNumber\":1078}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4781c31c-d9ed-4fec-a60e-8aa4fae392ed\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///fe791c96-3083-48d5-bdcd-326bc9553971\",\"moduleSequenceNumber\":1079}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4813045d-e0b5-41ec-94b7-a2137bad1169\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///84cb83ab-163f-4249-8238-37ff913c4540\",\"moduleSequenceNumber\":1080}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///d5fd6a28-040c-4b6b-9137-f9d53477278d\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///4473244d-66aa-4449-b08d-a79d7ecac4b1\",\"moduleSequenceNumber\":1081}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///d196fed4-c49d-4a30-910c-842ccc886100\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///8e9ccc88-ffac-46a0-9b04-46c2b55bc0e5\",\"moduleSequenceNumber\":1082}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ebb4a207-b498-48f3-a459-9d76767747b1\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///0c29e1de-ac4c-4ade-b39f-ec3563925fd4\",\"moduleSequenceNumber\":1083}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///2ed23e65-a3b7-4b77-a7bf-4b6421ae6914\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///ec75c49a-c7c7-41b6-812e-fef3b73b85f3\",\"moduleSequenceNumber\":1084}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4825d2ee-aaf2-4e03-ac6e-9cfe5796db2d\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///4629b976-30db-4e24-85ac-a754179e04f0\",\"moduleSequenceNumber\":1085}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///43ff92c0-2d9e-40c9-9256-6cfa5cd99b1c\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///805629e1-78a6-408b-80f4-1f06a571442b\",\"moduleSequenceNumber\":1086}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4a51ac94-d2d5-476b-b7b6-533871767d49\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///e61059ac-ca7c-4f5e-8d37-53ba53d49d1a\",\"moduleSequenceNumber\":1087}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///69bc25f8-9701-473d-8254-accbf5b42af7\",\"moduleSequenceNumber\":539},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///f951d723-e1d9-4799-a0ee-865e0cce7fda\",\"moduleSequenceNumber\":1088}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"home\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar boughtServ = ns.purchaseServer(\\\"serv\\\", 1024);\\n\\n\\tconst myMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\n\\tfor (var ram = ns.getPurchasedServerMaxRam(); ram > 1; ram / 2) {\\n\\t\\tconst serverLimit = ns.getPurchasedServerLimit();\\n\\t\\t\\n\\t\\tif(myMoney > (serverLimit * ns.getPurchasedServerCost(ram))) {\\n\\t\\t\\t\\n\\t\\t\\tawait ns.write(\\\"myserv.txt\\\", boughtServ + \\\"\\\", \\\"w\\\");\\n\\t\\t\\tfor(var i = 0; i < serverLimit; i++) {\\n\\t\\t\\t\\tns.purchaseServer(\\\"serv\\\", ram);\\n\\t\\t\\t\\tawait ns.write(\\\"myserv.txt\\\", boughtServ + \\\"\\\\n\\\", \\\"a\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"purchaseServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchaseSevers.js\",\"url\":\"blob:file:///7ac492d5-a6bf-4d16-b56f-d27442929a17\",\"moduleSequenceNumber\":21270}],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"home\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar myHacknet = ns.hacknet;\\n\\n\\t/**while(ns.getServerMoneyAvailable(\\\"home\\\") > myHacknet.getPurchaseNodeCost()) {**/\\n\\t\\tupgradeMyNodes();\\n\\t\\tbuyNodes(3);\\n\\t\\n\\t\\n\\tfunction upgradeMyNodes() {\\n\\t\\tconst myNodes = myHacknet.numNodes();\\n\\n\\t\\tfor(var i = 0; i < myNodes; i++) {\\n\\t\\t\\tns.tprint(\\\"Current Node: \\\" + i);\\n\\t\\t\\tvar nodeStats = myHacknet.getNodeStats(i);\\n\\t\\t\\t\\n\\t\\t\\tvar level = myHacknet.getNodeStats(i).level;\\n\\t\\t\\tif(level < 200) {\\n\\t\\t\\t\\tconst money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\t\\t\\t\\n\\n\\n\\t\\t\\t\\tmyHacknet.upgradeLevel(i);\\n\\t\\t\\t\\tns.tprint(\\\"Node \\\" + i + \\\": upgraded Level to \\\" + myHacknet.getNodeStats(i).level);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile(myHacknet.getNodeStats(i).ram < 64) {\\n\\t\\t\\t\\tmyHacknet.upgradeRam(i);\\n\\t\\t\\t\\tns.tprint(\\\"Node \\\" + i + \\\": upgraded RAM to \\\" + myHacknet.getNodeStats(i).ram);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile(myHacknet.getNodeStats(i).cores < 16) {\\n\\t\\t\\t\\tmyHacknet.upgradeCore(i);\\n\\t\\t\\t\\tns.tprint(\\\"Node \\\" + i + \\\": upgraded cores to \\\" + myHacknet.getNodeStats(i).cores);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction buyNodes(amount) {\\n\\t\\tfor(var i = 0; i < amount; i++) {\\n\\t\\t\\tns.tprint(\\\"bought new Node: \\\" + myHacknet.buyNodes());\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"purchaseHackNodes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchaseHackNodes.js\",\"url\":\"blob:file:///e4f6adf9-dc77-42e4-be06-8147c789d025\",\"moduleSequenceNumber\":26157}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"xtra\",\"serv1\",\"serv2\",\"serv3\",\"serv4\",\"serv5\",\"serv6\",\"serv7\",\"serv8\",\"serv9\",\"serv10\",\"serv11\",\"serv12\",\"serv0\",\"serv13\",\"serv14\",\"serv15\",\"serv16\",\"serv17\",\"serv18\",\"serv19\",\"serv20\",\"serv-1\",\"serv\",\"serv-0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\r\\nfoodnstuff\\r\\nsigma-cosmetics\\r\\njoesguns\\r\\nhong-fang-tea\\r\\nharakiri-sushi\\r\\niron-gym\\r\\nCSEC\\r\\nneo-net\\r\\nsyscore\\r\\nalpha-ent\\r\\naerocorp\\r\\nomnia\\r\\nicarus\\r\\nzb-def\\r\\ndeltaone\\r\\ndefcomm\\r\\nzeus-med\\r\\ntaiyang-digital\\r\\nnova-med\\r\\nzer0\\r\\nsilver-helix\\r\\nnetlink\\r\\nmillenium-fitness\\r\\ncrush-fitness\\r\\nmax-hardware\\r\\nphantasy\\r\\njohnson-ortho\\r\\nI.I.I.I\\r\\nlexo-corp\\r\\nglobal-pharm\\r\\nunitalife\\r\\nsolaris\\r\\ninfocomm\\r\\nomega-net\\r\\nthe-hub\\r\\nsummit-uni\\r\\ncatalyst\\r\\nrho-construction\\r\\ngalactic-cyber\\r\\naevum-police\\r\\nsnap-fitness\\r\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"myserv.txt\",\"text\":\"xtra\\nserv0\\nserv1\\nserv2\\nserv3\\nserv4\\nserv5\\nserv6\\nserv7\\nserv8\\nserv9\\nserv10\\nserv11\\nserv12\\nserv13\\nserv14\\nserv15\\nserv16\\nserv17\\nserv18\\nserv19\\nserv20\\nserv-1\\nserv\\nserv-0\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\nomega-net\\nthe-hub\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"68.8.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":59339759334,\"moneyMax\":1483493983350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1088,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"13.2.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":51897966627,\"moneyMax\":1297449165675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1253,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"58.4.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":29743181087,\"moneyMax\":743579527175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1006,\"serverGrowth\":73}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"32.2.9.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":29744759774,\"moneyMax\":743618994350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":976,\"serverGrowth\":68}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"14.1.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32552331584,\"moneyMax\":813808289600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1169,\"serverGrowth\":88}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"22.6.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":19961990534,\"moneyMax\":499049763350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1141,\"serverGrowth\":65}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"75.4.9.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":16664556975,\"moneyMax\":416613924375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":902,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"60.1.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":15961527268,\"moneyMax\":399038181700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1042,\"serverGrowth\":79}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-92824.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":559972636,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"59.4.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":28758098561,\"moneyMax\":718952464025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1003,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"83.4.0.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1736775279,\"moneyMax\":43419381975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":952,\"serverGrowth\":88}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-656084.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"12517188102\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"57.0.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1175,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"11.3.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1005182417,\"moneyMax\":25129560425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":990,\"serverGrowth\":69}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"73.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":942668695,\"moneyMax\":23566717375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":55}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-37008.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,6,0,8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"56.5.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":749352709,\"moneyMax\":18733817725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":940,\"serverGrowth\":57}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"57.4.2.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":717001191,\"moneyMax\":17925029775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":882,\"serverGrowth\":80}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"9.3.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":793224282,\"moneyMax\":19830607050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":62}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"26.5.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":997446904,\"moneyMax\":24936172600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"81.7.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1115373320,\"moneyMax\":27884333000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":895,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"59.2.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":870630228,\"moneyMax\":21765755700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":811,\"serverGrowth\":76}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"88.5.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":545425918,\"moneyMax\":13635647950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":73}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"86.7.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":882564340,\"moneyMax\":22064108500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":76}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"43.9.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":847054937,\"moneyMax\":21176373425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":860,\"serverGrowth\":71}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"0.0.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1150244652,\"moneyMax\":28756116300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":909,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"31.5.5.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":900962435,\"moneyMax\":22524060875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":927,\"serverGrowth\":62}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"86.7.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":967371003,\"moneyMax\":24184275075,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":779,\"serverGrowth\":73}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-763466.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,-2,-10,10,-9,9,10,0,1,2,2,-3,0,8,1,-3,-8,-10,1,-5,9,0,-6,5,-3,3,5,-9,-9,-9,3,0,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"22.0.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":911400197,\"moneyMax\":22785004925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":795,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-956760.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"9468\",-85],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"17.0.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":799771970,\"moneyMax\":19994299250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":811,\"serverGrowth\":76}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"42.6.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1623584144,\"moneyMax\":40589603600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":862,\"serverGrowth\":55}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-605925.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[86,23,122,39,75,79,175,115,22,162,74,135,64,165,170,14,181,139,131,136,63,85,83,13,36,173,7,119],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"45.6.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1749855737,\"moneyMax\":43746393425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":798,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-588548.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")((aa))a(a((a()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"36.8.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1116927413,\"moneyMax\":27923185325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":79}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"94.6.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1466234100,\"moneyMax\":36655852500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"23.2.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1061987651,\"moneyMax\":26549691275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":780,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"47.8.0.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":706378373,\"moneyMax\":17659459325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":716,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-597366.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[5,3],[1,7,6],[7,8,2,8],[1,1,5,5,3],[4,4,3,5,1,3]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"84.9.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":508632105,\"moneyMax\":12715802625,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":485,\"serverGrowth\":56}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"17.9.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":671918742,\"moneyMax\":16797968550,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":574,\"serverGrowth\":57}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-471787.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"50714192\",-34],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"17.8.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":316913302,\"moneyMax\":7922832550,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":448,\"serverGrowth\":41}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"68.6.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":206134797,\"moneyMax\":5153369925,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":428,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-843761.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[22,17,10,82,71,84,162,195,157,16,112,101,195,1,33,1,11,183,169,166,153,15,100,50,96,52,81,27,123,24,115,72,127,197,130,123,71,191],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-727558.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"157237232199\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"73.4.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":963786002,\"moneyMax\":24094650050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":762,\"serverGrowth\":85}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"20.2.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":333561726,\"moneyMax\":8339043150,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":448,\"serverGrowth\":45}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"25.4.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":424633161,\"moneyMax\":10615829025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":595,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"1.0.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":457224310,\"moneyMax\":11430607750,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":413,\"serverGrowth\":44}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-763692.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()()(())\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"20.1.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":181558207,\"moneyMax\":4538955175,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":301,\"serverGrowth\":55}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"66.8.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":223704733,\"moneyMax\":5592618325,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":327,\"serverGrowth\":57}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-600845.cct\",\"type\":\"Total Ways to Sum\",\"data\":55,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"49.0.3.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":392,\"serverGrowth\":66}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"48.5.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":14,\"minDifficulty\":14,\"moneyAvailable\":84389607,\"moneyMax\":2109740175,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":264,\"serverGrowth\":60}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"86.8.8.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":13.890000000000294,\"minDifficulty\":1,\"moneyAvailable\":922635,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-758672.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[39,52,58,127,188,60,54,46,130,65,115,166,9,27,41,193,104,108,67,147,129,17,88,31,81,121,96,119,72,147],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"66.4.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":14.105999999999831,\"minDifficulty\":3,\"moneyAvailable\":33282869.812991407,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"81.4.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":15.4239999999998,\"minDifficulty\":3,\"moneyAvailable\":39885653.0716915,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-949876.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[8,6],[9,4,9],[1,3,6,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"56.8.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":13.961999999999847,\"minDifficulty\":5,\"moneyAvailable\":35016641.21776737,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"58.0.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"51.2.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":14.643999999999892,\"minDifficulty\":7,\"moneyAvailable\":50110499.57023783,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-968863.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0],[1,0,0,0],[0,0,0,0],[0,0,0,0],[1,0,1,0],[0,0,0,1],[0,0,1,0],[0,0,0,0],[0,0,1,1],[1,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"45.8.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":12.039999999999951,\"minDifficulty\":8,\"moneyAvailable\":82927938.27353501,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"81.3.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"32.4.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":11.397999999999907,\"minDifficulty\":5,\"moneyAvailable\":53762269.97596418,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"53.6.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":9.80799999999989,\"minDifficulty\":5,\"moneyAvailable\":74450487.74858043,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-985286.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"9208965017\",75],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"43.6.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"98.2.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.872000000000002,\"minDifficulty\":5,\"moneyAvailable\":74746326.26761836,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"44.7.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":33,\"hackDifficulty\":11,\"minDifficulty\":11,\"moneyAvailable\":69656585,\"moneyMax\":1741414625,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":204,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-794271.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[7,-2,-4,-7,8,-2,8,-3,10,-7,8,4,-7,-3,9,-3,0,-3,-4,3,-6,-1,-8,-2,9,-7,-3,1,5,7,-6,-6,-10,1,1,-1,5,-6,-5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"25.0.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":40394539,\"moneyMax\":1009863475,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":241,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"1.9.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":21113429.52411952,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-96682-NiteSec.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"6241174172\",\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"73.5.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":488,\"serverGrowth\":32}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"39.7.9.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1068,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"97.3.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":700,\"serverGrowth\":54}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"40.1.1.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":532,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"11.7.6.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":341,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"53.7.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":209,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"19.8.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":547,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"62.4.0.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":9.663999999999826,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":58,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"13.6.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"63.1.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"80.0.6.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"xtra\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"xtra\",\"httpPortOpen\":true,\"ip\":\"24.2.7.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e135de81-d5f2-48ac-b809-0cc4f547387e\",\"moduleSequenceNumber\":56853}],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"xtra\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"xtra\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///2c2f9c63-dbca-4de4-87f2-ccb6673236f0\",\"moduleSequenceNumber\":56853},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5fe01dd3-e72f-46d8-9c00-1284cedd5bbc\",\"moduleSequenceNumber\":56853},{\"filename\":\"run.js\",\"url\":\"blob:file:///35e0032e-459d-45e7-aae2-93900acf15eb\",\"moduleSequenceNumber\":56854}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"xtra\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"download.js\",\"url\":\"blob:file:///8d4a1049-fc91-483d-8ac5-c8e3a92526ce\",\"moduleSequenceNumber\":1269}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"xtra\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///96edd142-925a-45ab-97d9-257c6478f705\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///64eb8193-0cba-4f15-9c5b-dca17ed8c0bf\",\"moduleSequenceNumber\":1090}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e6bac18f-0ff0-4f4b-abd4-adf6869bc062\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///14c0a17b-4628-444d-a7f0-a0dbd2611c14\",\"moduleSequenceNumber\":1094}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9198c62f-8ef4-43c2-b207-e647ba9a01e5\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///c35cb48e-a83a-433d-b966-faefa776e123\",\"moduleSequenceNumber\":1093}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///25e864a2-c9e6-43df-b3ad-1c7cdde44c8c\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///b41cba58-58aa-46af-a9f4-f9e8ccc6e60b\",\"moduleSequenceNumber\":1095}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///2aa86695-e025-41d5-b009-87b5e7317874\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///8ed37744-faa6-4872-bcd5-901cc05a91e3\",\"moduleSequenceNumber\":1092}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///114af0eb-c856-4917-963a-321ceb602729\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///1eb13dc8-439a-4f89-b52b-a7ddb78a604e\",\"moduleSequenceNumber\":1089}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/hx/install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"xtra\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/hx/run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"xtra\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/hx/controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"xtra\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///efa9ffae-fcf4-46b4-b808-9746c790de7d\",\"moduleSequenceNumber\":1486},{\"filename\":\"serverInfos.js\",\"url\":\"blob:file:///91a17f0a-3241-471f-95ab-7fce578f7261\",\"moduleSequenceNumber\":1924}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"xtra\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0e6da9f1-5b69-4757-8158-4a25a1ee8b75\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///7e68b39f-a3b4-4586-9856-b2a1a0113eb2\",\"moduleSequenceNumber\":1091}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///22dfba79-49c8-448f-a214-eebfaee7e661\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///08d9338b-ba28-4355-830b-b81df6bc20e9\",\"moduleSequenceNumber\":1096}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///344618b2-cca5-431c-87b8-a6aad581bb63\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///b7c12505-3ec4-480c-9a71-515c390d54df\",\"moduleSequenceNumber\":1097}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///1ee85581-b6f5-457d-b2fb-7cba424413e7\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///b1b472a3-72c4-4519-ae4a-8cf95d1efea5\",\"moduleSequenceNumber\":1098}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9d38b6b2-43fc-48e8-b0a0-201d14c30934\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///88140499-69a1-4813-a5e0-109ff3deec67\",\"moduleSequenceNumber\":1099}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9a1a4567-e957-486f-8671-6a5e48603923\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///bb423cc8-3399-4cf5-8633-580731f28cf9\",\"moduleSequenceNumber\":1100}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c937dce9-5a98-479a-8ffd-c0be071bdece\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///9e312d40-ab02-4df7-a8de-653acd62b5b4\",\"moduleSequenceNumber\":1101}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///fadaecde-193b-4304-b3f7-02de6aaba4d9\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///13ce95a8-8e91-45b7-9836-70edd5e5dfe9\",\"moduleSequenceNumber\":1102}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7d3e7374-db20-4648-bb42-ebb9630d73e0\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///730fb37a-4e30-4ae7-bdef-e62304e8a687\",\"moduleSequenceNumber\":1103}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///853413a5-550a-461a-ab99-29c51ca495d4\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///df2c4dc5-59c7-45d6-a48f-77224991a1d4\",\"moduleSequenceNumber\":1104}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///02354c8e-5e3a-4608-95bb-dc3b0a0a22b8\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///456d5213-c832-4964-a316-c369b46ba9f7\",\"moduleSequenceNumber\":1105}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///03c01493-1e94-4bb2-a751-d1c4aa5f8843\",\"moduleSequenceNumber\":562},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///a980e6c0-a46d-4120-aac7-ac7eb24e6c91\",\"moduleSequenceNumber\":1106}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"xtra\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv1\",\"httpPortOpen\":true,\"ip\":\"25.2.8.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv1\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv1\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv1\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e7afae9b-0a68-4a59-8ca9-6d1f585f50f0\",\"moduleSequenceNumber\":3835},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///bad9280a-ef5b-4008-b43b-67d2eaa35d92\",\"moduleSequenceNumber\":3835},{\"filename\":\"run.js\",\"url\":\"blob:file:///481cf5dd-9f66-4366-a7df-195a3dd5624a\",\"moduleSequenceNumber\":4596}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv1\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv1\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///19fb1fc2-f4e1-4312-a4da-becfef2f71d0\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///83d76c7b-8279-48bf-9511-eb4fdc4690ca\",\"moduleSequenceNumber\":1108}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///cdb53f75-076c-47d2-a002-b65137893111\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///0ca6b89d-05a6-4241-b01a-02fbab014b4b\",\"moduleSequenceNumber\":1112}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///fe6629c8-3a36-49a6-916d-cff6729424b4\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///8770cf37-debe-4b2e-bfb1-15abc29eec5f\",\"moduleSequenceNumber\":1111}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ac82ab41-c2a8-4a37-abee-26a7c04246a3\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///721a1e20-4fdd-425d-b1de-33fe301a74a9\",\"moduleSequenceNumber\":1113}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///438ccf84-a8ea-42d9-8863-848040096146\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///b682fc1f-3983-442d-a155-5679904986c0\",\"moduleSequenceNumber\":1107}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b1e53515-5efd-4819-a238-e4ac0e6c28c6\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///da22eee9-649a-4c6e-9f4c-7555b339ca07\",\"moduleSequenceNumber\":1109}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8dba011f-c444-4bd6-a8cd-71ec852471db\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///3e737fe0-65be-4afd-9531-bdca9d90fe84\",\"moduleSequenceNumber\":1110}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5307457a-8bf0-4a1e-b7f2-46295b28e8aa\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///027e2732-4845-49d7-881c-4de0e6bdfb55\",\"moduleSequenceNumber\":1114}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///10adfc26-1734-4324-8eb5-716b7d0d052c\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///3e642ea0-d90b-4424-82d3-a618811d9841\",\"moduleSequenceNumber\":1115}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a4441f79-de05-4d95-a99f-4b3791d61669\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///7a698400-9ec9-460e-aa5d-c58b94735854\",\"moduleSequenceNumber\":1116}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8811fd73-ba33-4b43-a4e3-796bc350490c\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///38918363-1a90-4fd5-9b61-01af091055d3\",\"moduleSequenceNumber\":1117}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///d310f2e8-b42f-4d3a-bf5d-d11889ceeedb\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///74abe87d-c553-4b4a-a8c0-8a98f0985ecd\",\"moduleSequenceNumber\":1118}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b9d7db03-824a-4137-bb0a-e6935bb7de8f\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///861f2cf9-755d-4592-8bb6-04a0dfe60428\",\"moduleSequenceNumber\":1119}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///99e050b2-8774-4e2e-ad00-75fada023119\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///ecb89e77-639c-4e81-87a9-29ad3a757968\",\"moduleSequenceNumber\":1120}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ac712ec1-2748-4940-8471-e9528974fe01\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///c0bf313d-0046-4a42-ae82-2b724a47ae22\",\"moduleSequenceNumber\":1121}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b721893e-aa8d-4e9f-ad9c-933094cbcf64\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///4c67e62c-0405-4f19-b02e-5d51ab8c625b\",\"moduleSequenceNumber\":1122}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5dd88797-124a-4b05-9bdd-0f9850282f74\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///72f1842c-52ce-49eb-9027-7933893eef4c\",\"moduleSequenceNumber\":1123}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8530682f-fab2-4eae-806d-d94df8b7663f\",\"moduleSequenceNumber\":588},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///495d7781-568b-4dd5-9558-5d418018e064\",\"moduleSequenceNumber\":1124}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv1\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv2\",\"httpPortOpen\":true,\"ip\":\"34.5.9.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv2\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv2\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv2\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4eb2af00-6b6c-4027-8201-0defe225e439\",\"moduleSequenceNumber\":3845},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4e46ae16-9a76-4901-86d8-dbfdc63b7d59\",\"moduleSequenceNumber\":3845},{\"filename\":\"run.js\",\"url\":\"blob:file:///11a6c154-ff13-46bd-9274-72b25c8c7b1c\",\"moduleSequenceNumber\":4655}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv2\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv2\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///29852cc3-d6db-41e6-a2ec-37800a9d4bf0\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///62365cbd-fefe-4ac9-a98c-381f7e5008e1\",\"moduleSequenceNumber\":1126}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///68b2f05a-0d53-4ad3-a175-b5cda65659fc\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///409961f0-db54-4771-a98d-cdb4c788f179\",\"moduleSequenceNumber\":1130}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///13815066-ec3a-4acb-89bf-2dafd738d499\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///5c3dbc0a-8b1e-4fe3-b1a6-df36804869dc\",\"moduleSequenceNumber\":1129}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///003c6dae-e6ff-408a-8634-86deb6355863\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///93d854f2-2b3a-485a-a807-ce9b661e40e7\",\"moduleSequenceNumber\":1131}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9ed12d59-2017-4ab1-bde1-47503d9afbe3\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///b087e314-c3af-4b0e-90ca-5d75e2042276\",\"moduleSequenceNumber\":1128}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///883dae24-8da4-432b-9dfb-b24fd3881c8f\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///312bd9f7-3cdd-4852-be4b-d1cebb17cb51\",\"moduleSequenceNumber\":1125}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b88dcbe5-b7df-40cc-9377-183b67c62879\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///1b31f89d-d300-4538-bc26-d9d309e2e1e4\",\"moduleSequenceNumber\":1127}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4291c0e2-6778-4841-9cdd-9dfbd6256223\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///b7546d9a-80ac-4e21-9787-87cf32cf7bca\",\"moduleSequenceNumber\":1132}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///96a76377-c160-4957-8475-2233ecd5e9c2\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///7febd30e-06c6-4316-ac5e-1aebc403d6dc\",\"moduleSequenceNumber\":1133}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b78bbd98-6992-4fa9-8222-ab8ffffe0535\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///5d285273-7c3c-4ad6-8503-a9b9e8f628ea\",\"moduleSequenceNumber\":1134}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///367b2273-1417-444a-b9a3-0e06b1e7daff\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///57b689e9-9836-4f6d-860f-ebcee491255c\",\"moduleSequenceNumber\":1135}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///335808a8-8734-4fd6-8e48-2f5b4ca938fe\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///6518e7f0-4e8d-47b8-9273-b53090e96e99\",\"moduleSequenceNumber\":1136}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7be3feca-a127-46a7-a9e1-38ce89adec10\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///6fd2026c-5a79-476b-bf62-0231f3f00bff\",\"moduleSequenceNumber\":1137}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c668aef2-8879-48ea-940a-2138b18eb1bc\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///86646c89-de3f-4b19-b40f-654de33195a5\",\"moduleSequenceNumber\":1138}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///131f05e8-2614-4bac-865b-03d691ff9b7d\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///bd9a2ce3-d8ae-4597-873c-fbf5fd0bd903\",\"moduleSequenceNumber\":1139}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///429100dd-c43b-4f48-b20b-c6e446f40a4b\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///b3a9e1e2-bdb9-4853-9a57-130077235685\",\"moduleSequenceNumber\":1140}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///dc557b4a-1f6f-4c6e-a37d-a39ffbebacac\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///ca28b79d-d584-43d5-8a25-39f0f987efc2\",\"moduleSequenceNumber\":1141}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c3cea0bf-681a-48ca-98b7-bea31ad88a63\",\"moduleSequenceNumber\":611},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///59879441-de35-49fa-b500-19155af651a8\",\"moduleSequenceNumber\":1142}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv2\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv3\",\"httpPortOpen\":true,\"ip\":\"40.0.7.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv3\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv3\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv3\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c5bca71d-196c-4df7-8b02-a12cdf1a9807\",\"moduleSequenceNumber\":3855},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4b69bfcd-6844-4d89-b1a9-308cc35403a3\",\"moduleSequenceNumber\":3855},{\"filename\":\"run.js\",\"url\":\"blob:file:///0b9fb27c-419d-4a04-8fb5-986448fb62ce\",\"moduleSequenceNumber\":4732}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv3\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv3\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///911a4e9c-ce18-479d-ab7d-4a93667453d0\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///f668e145-26ab-4932-8328-50480d25495f\",\"moduleSequenceNumber\":1144}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8b29cd97-d2cb-4adb-8df2-5800f27498ac\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///5f06f483-6a7e-406c-ac10-dc012f08194a\",\"moduleSequenceNumber\":1148}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e908ff54-41d8-4c86-9d01-2c894e1f974f\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///a21416a5-77ae-499a-8ffd-409870b3e017\",\"moduleSequenceNumber\":1147}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e29a4b36-833d-41d5-9ef9-bb3902ae3711\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///74998284-5e4f-47c8-b9bf-1d0f67f4339c\",\"moduleSequenceNumber\":1149}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///52d05dc5-6e74-4bdf-9119-6f5bea4cf126\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///8d77292c-2a37-47e7-9686-1b8f7ee126d9\",\"moduleSequenceNumber\":1146}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a37a4981-a536-4aca-b2c1-1dc942cd3a36\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///e9d53ef9-b11b-4f6b-80ed-372756ab2d38\",\"moduleSequenceNumber\":1143}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///58cdd5d1-27bf-4c5b-bc70-4d739411d19a\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///dbf5b344-eff2-4f9c-92eb-92f0be2b7a8c\",\"moduleSequenceNumber\":1145}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///43fb6b1e-7962-4ded-92df-9ec3aba44fb1\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///dcb10953-ffb9-41fa-a969-1ee6aa558425\",\"moduleSequenceNumber\":1150}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7e577f51-ddbe-4bf8-98b6-8d90ae0a6f55\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///49bd8fb5-1587-4651-a1e1-dce31156685f\",\"moduleSequenceNumber\":1151}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///95434b35-9918-4ec0-8325-2836589f2901\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///2db6d220-11e6-4098-9d44-cbc522b27f3b\",\"moduleSequenceNumber\":1152}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///007f6bf6-7f7d-490b-8155-45d4eee137ac\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///b5630978-6ebb-4b53-956d-fa1c817b36b3\",\"moduleSequenceNumber\":1153}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b697ba2a-d0f2-4f01-95b2-8d999b5fa06d\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///d59c36c2-999c-4c92-9d65-d44a17e9340d\",\"moduleSequenceNumber\":1154}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///cfe92777-83f4-4b3f-80aa-2ec24a2fb3f0\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///7ea2fa06-1983-49c1-bc69-2bada8b7cb7f\",\"moduleSequenceNumber\":1155}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c5beaec1-9523-4994-967b-60e3f51c6635\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///f9e2a2ab-b81d-4125-b73e-38426094efb8\",\"moduleSequenceNumber\":1156}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///95309ce7-93eb-4b06-9450-5717dd68ec11\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///5f58fab1-0013-4c3c-803f-bf2bd3050370\",\"moduleSequenceNumber\":1157}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c3980a49-61eb-4178-a58b-ee0462575275\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///130f731a-d729-4259-a2f5-00277a6968e7\",\"moduleSequenceNumber\":1158}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///64687351-6b89-4f57-848d-0f9fc8cf09e0\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///66d8ee5e-986d-4d20-afb7-960ddb4fc60f\",\"moduleSequenceNumber\":1159}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///86e8d4ce-e594-4820-9b72-632adb6a1728\",\"moduleSequenceNumber\":634},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///093d2bbc-210f-48b6-9c50-20b8b419bfe0\",\"moduleSequenceNumber\":1160}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv3\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv4\",\"httpPortOpen\":true,\"ip\":\"82.3.2.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv4\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv4\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv4\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ad224065-41b8-4543-836c-8ba7370c147d\",\"moduleSequenceNumber\":3865},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///385c7f3a-1787-4294-ae76-7d7f1a6bfdfa\",\"moduleSequenceNumber\":3865},{\"filename\":\"run.js\",\"url\":\"blob:file:///36de1d66-ccd7-4a91-b861-36704b8bbbea\",\"moduleSequenceNumber\":4791}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv4\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv4\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a8a5595c-941c-4287-af9a-d7adef6564bc\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///8adf121d-7305-4dcb-a44e-377c15344db3\",\"moduleSequenceNumber\":1162}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///2befd3c2-28ab-47a6-8332-7bb7c00857ab\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///d5386382-7c6c-474f-bcc0-d8fdff2dc851\",\"moduleSequenceNumber\":1166}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///72605084-d1da-4e83-8da6-a10ade563967\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///971524e2-6974-4873-9f26-904568dbbd5f\",\"moduleSequenceNumber\":1165}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///69dafc82-0e97-40fc-8601-1f66d0e0750d\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///198bdf81-0217-4c00-9ff0-8f470bc5d14b\",\"moduleSequenceNumber\":1167}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8c027be7-0ef5-4619-8317-29d3081373bc\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///277d3f42-8924-4fc5-9990-f6d47de0f256\",\"moduleSequenceNumber\":1164}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a1212314-22a9-491c-877f-d0c0c3f8ae58\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///c6b68fd1-3d2a-4efe-82e0-01e35f8c2385\",\"moduleSequenceNumber\":1161}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///42413fab-9c74-4f84-a381-3f51dce73fa4\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///9f222401-802f-4417-a702-85ae1ce70558\",\"moduleSequenceNumber\":1163}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///eb2d4fc0-eb60-45b4-93d9-aff5ae1a3f9a\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///51b9258b-339c-469c-952e-5d39bfa4af89\",\"moduleSequenceNumber\":1168}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///fb598d5f-3274-4011-ba6b-1e6b488c2baf\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///3d842dd1-3454-4070-b4dd-0601a478a282\",\"moduleSequenceNumber\":1169}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///39aa41e3-073b-4d04-8f6c-427d665f1a9f\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///f24ce02e-82ba-4600-81b5-acb3dd9f85d7\",\"moduleSequenceNumber\":1170}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8a23c3c6-7dd2-4171-b6d9-8ce5de0eacb5\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///1fb69439-f194-4887-92e6-31810810ec26\",\"moduleSequenceNumber\":1171}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///81d5521d-6d8a-48dd-b5e0-7631e15228b6\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///fc37a848-0d8c-4820-a25b-1b8ec0060c8f\",\"moduleSequenceNumber\":1172}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e4fe1783-149a-4e5d-94bf-642786a1d788\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///616d3268-0d9f-4003-81fa-2280d5ccbd35\",\"moduleSequenceNumber\":1173}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///26f960f0-a727-42cb-bd55-976b4823a6d3\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///ea7dc871-62f8-4c2a-852a-78dc988b83ce\",\"moduleSequenceNumber\":1174}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///061a583a-1cf6-4e5a-bc9a-4048fa1d3c0e\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///301ebf12-d85a-4a98-aad5-be6085633bf7\",\"moduleSequenceNumber\":1175}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0264fb68-eb04-47c3-89e6-f74cc9a50b03\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///0f22d032-0fe6-45bb-bf5a-0ea8e5991e37\",\"moduleSequenceNumber\":1176}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c0898a16-8364-4c26-9d7d-d52079fe1629\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///3827a6c7-0b8f-413b-9232-59fea7a1b82b\",\"moduleSequenceNumber\":1177}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ce644c21-1c6c-45b3-aea4-47853cb05c8a\",\"moduleSequenceNumber\":657},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///35ee72b2-ceb8-4eef-bce0-02cfdcf7104b\",\"moduleSequenceNumber\":1178}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv4\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv5\",\"httpPortOpen\":true,\"ip\":\"2.1.0.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv5\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv5\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv5\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9f1e28d0-3f4e-44c4-9d61-2c72e781df41\",\"moduleSequenceNumber\":3875},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5c254731-2a59-4bb3-addf-b1c86f9053b8\",\"moduleSequenceNumber\":3875},{\"filename\":\"run.js\",\"url\":\"blob:file:///45610e98-7681-4e52-b94f-85a9757b6cc5\",\"moduleSequenceNumber\":5151}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv5\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv5\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///6faed14f-fe38-4b38-af7a-8c76c15c2714\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///8e4e8803-742a-4b9c-a5ea-748ba1a6f730\",\"moduleSequenceNumber\":1180}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e210faa2-5076-43db-b2b9-03dbf3bb516c\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///7f78fc0e-2040-4863-b26e-19a5189f601b\",\"moduleSequenceNumber\":1184}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///bd40bfd9-06d8-45d9-ac71-a0a7e6076997\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///468bdba7-ee23-4777-aa6b-b6a13ce3a1fa\",\"moduleSequenceNumber\":1183}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8d0ba722-9664-4e76-85d9-6843670e2306\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///7ad6da2e-38e3-4316-a8f1-b378ff2537c6\",\"moduleSequenceNumber\":1185}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a57a7e21-2018-45fa-b183-87bd6d9317db\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///f2a18948-c975-4878-b33d-c344717dd888\",\"moduleSequenceNumber\":1182}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0e72c476-0e03-42f4-ae08-c20c1f543bf0\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///100293d9-fbe9-467b-b22f-5623f2d05c81\",\"moduleSequenceNumber\":1179}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5c379ffa-15f5-441e-91c9-102382ff22a3\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///098253dd-980e-4009-bff3-8ead611f6ebc\",\"moduleSequenceNumber\":1181}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e1ba3a44-0900-476d-93b6-f6d4a1cb45aa\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///67ea60b6-df7b-4d1a-ae6e-fd48e2c821b1\",\"moduleSequenceNumber\":1186}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///776b5886-b4da-4aee-9a6c-cb8fc5827483\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///925f8457-6d61-4b2b-a69e-b90074c05355\",\"moduleSequenceNumber\":1187}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///19b39c32-119f-496b-965b-e2d0458536b8\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///a4e7f201-59c3-4ccd-914d-ee461c6a082b\",\"moduleSequenceNumber\":1188}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b799485a-0915-45f9-9c63-840b92c99314\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///6da7c8d9-a641-4385-814c-9c87cec3899f\",\"moduleSequenceNumber\":1189}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a26af063-54f6-4f8f-badc-c3283614f10b\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///e49ed1dd-ad9c-46b4-bfb0-3c0a8ba8dd89\",\"moduleSequenceNumber\":1190}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///d7512fd3-6c7f-4f8d-a133-c8f5d59ed4da\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///94c41c5e-292f-4853-913b-174a5ed5cae4\",\"moduleSequenceNumber\":1191}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b11afd8f-6dea-47ca-9791-89095b27d35e\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///03fe332d-5853-4080-aa64-a2de602680be\",\"moduleSequenceNumber\":1192}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///de7fd1f9-7adb-481e-ba94-5bf4d9c07671\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///dce35167-c904-490e-abdb-c4024bfbdf31\",\"moduleSequenceNumber\":1193}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///017152b6-7df9-474f-893a-140035fe59f2\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///b950658f-385e-44fa-8008-877475cbe1df\",\"moduleSequenceNumber\":1194}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c03f40c9-d561-41ab-aabe-803cf0f69fb5\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///fc881c04-80bf-4473-ba1d-9122f3fd6ec4\",\"moduleSequenceNumber\":1195}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///10e42c56-3edc-497f-a4c8-e004b9f5ec4a\",\"moduleSequenceNumber\":680},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///847fdae1-259d-438f-95dd-01d702196e67\",\"moduleSequenceNumber\":1196}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv5\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv6\",\"httpPortOpen\":true,\"ip\":\"49.2.7.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv6\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv6\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv6\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f44ccaec-fb00-4477-b181-b5c90ba52c0e\",\"moduleSequenceNumber\":3885},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///6c5d8ada-e69b-4fe1-ba4e-8f449a7dd0ad\",\"moduleSequenceNumber\":3885},{\"filename\":\"run.js\",\"url\":\"blob:file:///5c8687ee-6197-4de4-bbd7-fa72063bdb15\",\"moduleSequenceNumber\":5210}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv6\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv6\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///801df58e-d891-4ef1-945d-678b15e84f1c\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///77fb477b-611d-4987-a2e9-5f05748f91d9\",\"moduleSequenceNumber\":1198}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e266d973-4108-4064-b0b2-832d032c0482\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///b25c6f52-ae3a-4437-ac6d-b9e55bdc9937\",\"moduleSequenceNumber\":1202}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a61d56e5-86ce-40a9-8a71-069ab6fc4bde\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///e1755490-3c85-4e6f-9db5-f28085b566ec\",\"moduleSequenceNumber\":1201}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///16db4be4-3fd3-46a2-89db-ba4054ffee7a\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///671c801d-9965-46c1-9e08-b47051388c68\",\"moduleSequenceNumber\":1203}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4655eced-2c35-4672-8c3e-21714d4f08ad\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///f5a4adcd-34a1-4d7a-a2ba-c45067804725\",\"moduleSequenceNumber\":1200}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///14af6fe9-3134-4732-8071-8ab231d8e257\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///85504bd0-4279-4a55-8bed-7ce7bb373efa\",\"moduleSequenceNumber\":1197}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///86e74bf1-6dee-412f-8961-491d20ef94e4\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///9cbbd972-f17d-488e-b3bb-6924b0788492\",\"moduleSequenceNumber\":1199}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///57cb87c6-3858-4b2a-bffe-dbaa8ff85447\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///07edecde-49a1-4adc-81ed-562907dda8de\",\"moduleSequenceNumber\":1204}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a1705d3b-0078-42cb-aa8e-7123a53cd055\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///1f8af0d9-e9ba-4ff3-8fdd-6358a926eeac\",\"moduleSequenceNumber\":1205}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///1ff038d0-4cc8-47c5-9c1a-0b6b59f81467\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///25e34808-17c1-41cf-8464-2c1965741396\",\"moduleSequenceNumber\":1206}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ab217cbc-f031-4fc1-910e-23314ee3d519\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///7ba6bfc8-9bb7-46b1-93ff-f12bfa2d01da\",\"moduleSequenceNumber\":1207}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ffdb1e6d-d73c-4a0f-b738-9dbbbfa1fe8c\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///c28a0ae0-9292-4326-9b11-5dfeb9146c1e\",\"moduleSequenceNumber\":1208}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///cd11e8fd-5e92-49c3-ba03-cba734110120\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///3747c21a-307a-460b-bfce-a3175fb9fbf1\",\"moduleSequenceNumber\":1209}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e690cd3a-fe20-472e-921e-25caf88f6d5d\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///588ffb7a-03da-4b0c-9a35-adb1ca3b946e\",\"moduleSequenceNumber\":1210}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///07421d2c-0861-4217-a04a-ec74d9af2776\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///55fe8ebc-7234-481e-b58a-d4bc593b98fe\",\"moduleSequenceNumber\":1211}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///790a7d73-f383-4b3d-9cb9-c6ef1310adf4\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///542d265e-fc70-4aa6-8dd6-516d8c9e4024\",\"moduleSequenceNumber\":1212}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e77d5eee-f541-495e-8dd8-b1ddd729e8fa\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///2b6b4f2f-3804-4ba1-8fab-892448a48818\",\"moduleSequenceNumber\":1213}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b5ba6701-53b9-4135-8371-2c4223574662\",\"moduleSequenceNumber\":703},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///c8b5bb3d-797f-40b4-b31b-462be0c08e5c\",\"moduleSequenceNumber\":1214}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv6\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv7\",\"httpPortOpen\":true,\"ip\":\"11.5.0.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv7\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv7\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv7\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///98529297-bfd5-409f-9160-c115e7cc834c\",\"moduleSequenceNumber\":3895},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///81596814-6a83-454d-ab61-ddde99ef3328\",\"moduleSequenceNumber\":3895},{\"filename\":\"run.js\",\"url\":\"blob:file:///037f5fa1-9dd5-4b2f-9d2c-a85e60454446\",\"moduleSequenceNumber\":5269}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv7\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv7\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a595c97b-5953-461c-b625-5c0ea537e394\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///002d6f95-199c-4996-8a9d-f4555b784d03\",\"moduleSequenceNumber\":1216}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5b85935e-5b4c-42c9-ada4-dcb1e1f66fda\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///1d5f4e1d-71b2-4b53-b464-d43b0115de1f\",\"moduleSequenceNumber\":1220}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///2d639924-fd4e-418d-bad1-4c360a873d57\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///a31c678e-a1f4-4547-83d3-3e84915d9a0a\",\"moduleSequenceNumber\":1219}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7b8c2c6e-a0ac-41d5-839c-8d1810e4c429\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///e6a8a9ad-16c1-475c-b85c-d45636a973b1\",\"moduleSequenceNumber\":1221}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7b808faa-4efc-4654-9a0e-2587efe8ef00\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///514b8b31-8f67-4ee7-aeb0-ecb0c4921bc9\",\"moduleSequenceNumber\":1218}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a1d35239-40fb-4993-9d51-1d2b5742b79d\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///5f130496-5678-486f-9340-043a1f966d94\",\"moduleSequenceNumber\":1215}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0122faa7-0e4d-4b1b-9b65-26f572c4fc4b\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///225dda8b-cf9e-4e6f-8875-5cf484b7012b\",\"moduleSequenceNumber\":1217}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///47089c0f-4586-4e7e-8fef-6e125dda5f85\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///976e297d-efa7-478b-8f9c-94d41a9df831\",\"moduleSequenceNumber\":1222}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0f12f423-d6b1-4cab-9f6f-3f3067c716b4\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///c890f68e-005a-4f55-9d76-ba11f75701f5\",\"moduleSequenceNumber\":1223}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5c4017c6-1f67-4aa2-8221-65e32399071f\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///91fc0569-fad6-4289-a331-778b6b2379af\",\"moduleSequenceNumber\":1224}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///32440005-b28f-4cc5-a85e-71ccc1e6b3b1\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///5c6d451b-ee6f-4cdd-bf13-06925f160bfa\",\"moduleSequenceNumber\":1225}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e1c1d2a2-dc44-4049-bb4c-ca209d68b960\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///fce2d454-a3aa-48e2-95e5-d5ddc94588b6\",\"moduleSequenceNumber\":1226}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a40a7446-0eac-4f44-8b5d-ec99a6097bb4\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///ae40b62b-bdad-4b60-881f-0f9d37cdb80c\",\"moduleSequenceNumber\":1227}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b93a9cd4-ab6e-417f-9d7e-3971bac5be4e\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///600be87b-2c44-4c8e-8ab6-0fba1ed3fab8\",\"moduleSequenceNumber\":1228}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5e2ee603-2b44-46fc-a0e9-00c687da2a73\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///ff77908f-6ac0-4828-9f1c-39f2e8c425bf\",\"moduleSequenceNumber\":1229}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///412210db-9d6e-4245-b65c-ff983c81f39b\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///13581e03-3563-4f13-b102-3f83f90eeaa2\",\"moduleSequenceNumber\":1230}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a5f40820-d68d-4904-8854-4490b82e3e1a\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///e8536ec3-0a7f-4a3e-8d9e-e40d63a0cf04\",\"moduleSequenceNumber\":1231}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c5d4c60e-38c6-495b-9c00-81319f65c893\",\"moduleSequenceNumber\":726},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///1f957ba1-d0ba-430c-af72-979c5b6e9435\",\"moduleSequenceNumber\":1232}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv7\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv8\",\"httpPortOpen\":true,\"ip\":\"82.5.8.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv8\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv8\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv8\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///798c8cd8-05b0-4594-8f31-9a2a91c4854f\",\"moduleSequenceNumber\":3905},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///02156feb-e738-4328-80f0-1476b8d9870f\",\"moduleSequenceNumber\":3905},{\"filename\":\"run.js\",\"url\":\"blob:file:///4ac3e679-3dde-4568-b290-73681af0ef4c\",\"moduleSequenceNumber\":5328}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv8\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv8\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///dc91b5a0-b66a-4e59-b8a7-dd743b345ae3\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///0adab5c7-36d9-46e0-bbb8-93f72cc8068f\",\"moduleSequenceNumber\":1234}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9ba5bcb3-6677-4183-b989-04c2159ac6ce\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///aa259b28-5640-4013-9407-07a6c797b9a5\",\"moduleSequenceNumber\":1238}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///568d6361-2f2e-4d42-add6-174ccfce5b85\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///26fe5e2c-a365-4231-ac48-aec10dae4f47\",\"moduleSequenceNumber\":1237}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///83d5ab43-d418-4cc1-9a32-67512b5c4887\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///2b556a1b-55c2-415e-920b-1a35a327c9d7\",\"moduleSequenceNumber\":1239}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///cf327a2b-d8d5-4af3-a87a-241e30f90488\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///a85a8f50-bba5-466b-86c6-2e108af1c481\",\"moduleSequenceNumber\":1236}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b03e11bd-2158-4e30-adff-dc77a5c66d0f\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///f8b2333f-6855-4bab-b52a-d7e0b1fe6f0b\",\"moduleSequenceNumber\":1233}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8d4bec1e-9587-4d5f-9dee-4107b3db2eb1\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///ef5b5bdd-e12b-441f-b65b-2631c368e983\",\"moduleSequenceNumber\":1235}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///82b427cf-5258-4481-9aef-c373a1d871e6\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///0c22a8bf-9bce-4ae8-a4e9-49ca2b862322\",\"moduleSequenceNumber\":1240}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9f54b711-3ce7-4283-a2ab-7214f5a065df\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///175739e2-e4fa-49b7-b785-f64f5d5591a5\",\"moduleSequenceNumber\":1241}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a208e4e9-c24b-4e53-a1c5-8101f7ed4d74\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///7062506b-47f5-4704-aa27-d10991e24965\",\"moduleSequenceNumber\":1242}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f8637698-055f-4d1e-a573-6202b2266532\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///6b030ae9-8ae8-4dfa-89db-f3630f413297\",\"moduleSequenceNumber\":1243}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///255453d8-d05f-4c45-a775-3d8a13d226fd\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///5eaac0a8-0fe0-4791-bcc6-89a4b90685e4\",\"moduleSequenceNumber\":1244}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4924bf49-f5cf-44e8-b5cc-f69539a1f671\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///e2c642fb-1e8e-4e82-be0b-80b6979ae049\",\"moduleSequenceNumber\":1245}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///54b761e7-fa68-417f-bfeb-483fbf3d6354\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///c84fee29-71c6-4935-be3d-972bfb7b15ef\",\"moduleSequenceNumber\":1246}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5198985a-ddea-4a4c-a44b-fa5acc57afff\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///1d594cc6-0372-463e-8a44-c4cca31d5471\",\"moduleSequenceNumber\":1247}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///912e2bcf-e9bb-45e5-858e-ce90a683c114\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///d12e0a56-f913-4aba-9a15-94e86fec6017\",\"moduleSequenceNumber\":1248}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7f115884-3dd6-418c-9b1b-5519bae22899\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///a4ad753d-bb34-4235-8417-d74e9cdb0da2\",\"moduleSequenceNumber\":1249}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///fc8bc093-fc77-4627-b4cf-f7fb61b2b708\",\"moduleSequenceNumber\":749},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///578d1123-a91e-4103-b699-9eac6e16203e\",\"moduleSequenceNumber\":1250}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv8\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv9\",\"httpPortOpen\":true,\"ip\":\"9.9.2.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv9\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv9\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv9\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///70712b79-4495-482e-98da-7e3694249473\",\"moduleSequenceNumber\":3915},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///26ea60dc-1d51-4c3f-b3ca-c3d6d9e4c2e1\",\"moduleSequenceNumber\":3915},{\"filename\":\"run.js\",\"url\":\"blob:file:///ab9a7309-cb5c-4e3e-a7c8-a9179143a3e0\",\"moduleSequenceNumber\":5387}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv9\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv9\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7e04b48e-0044-4b40-aa08-8d1e18538455\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///930037dd-16c4-4541-bf24-ddd8be9f028c\",\"moduleSequenceNumber\":1252}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5e9c3a60-d793-4266-8359-176b297036c9\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///d9c504b0-9ec6-4a7c-8caa-a2c6fea8df6b\",\"moduleSequenceNumber\":1256}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///896985e9-1b82-4bae-9c26-aeb23be232c5\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///6235bb58-a231-469d-9070-40d968971cd2\",\"moduleSequenceNumber\":1255}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///05742d2e-bffc-4ef3-91ee-72bd3eb222e7\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///06ea7adb-17b6-424a-aa18-b267b30f27f8\",\"moduleSequenceNumber\":1257}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///79cae05c-d427-4380-af19-6da95ed52dde\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///5a8f9f2c-a0e4-4c22-aecf-efb6e7b50fc0\",\"moduleSequenceNumber\":1254}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///da22bb80-fe40-4232-8e58-f15151e87ec1\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///e0697e2f-ec49-48b2-9ae7-2ff70b30817b\",\"moduleSequenceNumber\":1251}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///bab9ebbe-b723-40b1-b863-c69a1e191be4\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///3a36a5b1-2731-4551-adbc-fe2e19b1bbeb\",\"moduleSequenceNumber\":1253}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a2e0fc1a-3b7d-4f9a-9f5e-3648bbb09fe1\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///f2c04e0a-d008-4081-9ed3-b88243e86da9\",\"moduleSequenceNumber\":1258}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///843e145d-3285-432e-9d66-4e72da3cfcc3\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///a01e8806-2100-44c1-9e2b-6c6788a95bfd\",\"moduleSequenceNumber\":1259}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e9ebb87d-929a-4275-8441-cfacdc321a7b\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///5afb8816-5bf2-45da-9a8c-bc623b6852b6\",\"moduleSequenceNumber\":1260}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///324e5315-c7ce-49b1-a723-7aa4d2f9e7d4\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///78b73222-14f3-4bca-b69e-6883ebe55555\",\"moduleSequenceNumber\":1261}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///606d75f8-81c5-4404-986a-4b7a8cf6ee56\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///36e1e47a-9851-4461-9e4d-ebce95fca456\",\"moduleSequenceNumber\":1262}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///69b8beae-dd81-4a75-b6eb-5c9040e6666b\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///0fd76885-9495-490d-8dc3-1de2ad73d6de\",\"moduleSequenceNumber\":1263}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b7054974-3ffa-4447-8b1b-c6749c72c4e3\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///d1fcc0e2-9dfb-42ca-ad90-d57b740ac373\",\"moduleSequenceNumber\":1264}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///43abe0f5-22cb-430a-af45-5cd4f329ccbf\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///b1f07f74-c3f4-4bfd-9d6e-5e11087b3f83\",\"moduleSequenceNumber\":1265}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///336098a8-59dd-41c5-ab5b-f1c331c2ae4d\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///5eb49694-a2de-44a2-9a2c-106b4ae93c9c\",\"moduleSequenceNumber\":1266}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///868fbf08-ce04-4236-a57f-8b1450c0419d\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///a5e98ebd-51ba-4d21-8d88-b47815551fe9\",\"moduleSequenceNumber\":1267}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a3eabc51-accf-40da-ae67-7214083f6337\",\"moduleSequenceNumber\":772},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///9fe8ab42-bbb5-4cfb-9f46-f0f1a2825bdc\",\"moduleSequenceNumber\":1268}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv9\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv10\",\"httpPortOpen\":true,\"ip\":\"25.3.4.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv10\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv10\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv10\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///994ca085-6807-4496-ae6e-789c6dd190e4\",\"moduleSequenceNumber\":3925},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///2a892a9a-d975-4498-bfc0-e93f9a8c714f\",\"moduleSequenceNumber\":3925},{\"filename\":\"run.js\",\"url\":\"blob:file:///a5dda033-95d8-41f4-97ad-4835b5dd0aec\",\"moduleSequenceNumber\":5446}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv10\",\"moduleSequenceNumber\":798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv10\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///197d5659-b90b-4956-a5d9-6ce7dd57a227\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///5f543873-f345-4f8d-a4ba-3cdb3592ca25\",\"moduleSequenceNumber\":1270}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ed30f481-c81f-4768-b548-3df209a28701\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///d7b18883-2818-4700-bdf9-195e755920eb\",\"moduleSequenceNumber\":1274}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9be2538d-d77e-4ae7-bad5-2e2d25d1708d\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///f1652b3b-c8bd-46f8-8827-9c596bab01eb\",\"moduleSequenceNumber\":1273}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///366fce84-5430-470d-ade6-d36c0db27a1a\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///2999f187-e5d8-4181-9652-7285bf073961\",\"moduleSequenceNumber\":1275}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///51d89cce-33aa-4dab-96ba-a9d3044b9589\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///53720669-f016-44e4-bda1-291a543deaf3\",\"moduleSequenceNumber\":1272}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///db2da140-160c-4345-98b8-84e351866064\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///1724efc4-3dab-454a-87a9-3b73e0ecd09b\",\"moduleSequenceNumber\":1269}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7e69bc56-9bae-4f75-9118-98d288cab90a\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///5cc75661-b551-4bdc-b2d8-f7efc1da37ee\",\"moduleSequenceNumber\":1271}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4a2755b6-fb3a-4481-aaef-705a648b8331\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///d0a4e252-088d-4994-acf6-3ad9175f0a71\",\"moduleSequenceNumber\":1276}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///db694983-d1b3-476b-b0b0-27b202ac733d\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///5f6e681d-7350-4aff-9349-90e6b4b62d64\",\"moduleSequenceNumber\":1277}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ec9b867e-9b9f-4e2a-bbff-34af4bad4ccc\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///804f2049-7f8b-402b-8fac-5ea2788c165e\",\"moduleSequenceNumber\":1278}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c903908a-cac3-4328-a9ae-f956023714ac\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///ce7086bc-2812-40d3-aeba-aea8b6af30e3\",\"moduleSequenceNumber\":1279}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e9adc9dd-2773-4bb3-9d58-9850d3d3922a\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///9a3f2486-57cd-4e95-87a7-73fc346a3afb\",\"moduleSequenceNumber\":1280}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///93e6b51a-c41b-4db3-9839-c6a4ee42c439\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///44d24bf7-74be-4abc-877f-618daea3f4b7\",\"moduleSequenceNumber\":1281}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///6e5d626b-bf5b-4d11-a8ad-1d1e795d31f5\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///e0eea806-225a-4596-9732-cd9a1024351d\",\"moduleSequenceNumber\":1282}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///736f5cb6-904a-4920-a548-f1fe87a7e37c\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///7ad42d71-2efe-45dc-8f34-ee26d28c12ea\",\"moduleSequenceNumber\":1283}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///bcd70976-aa07-496c-8b89-4e0e3470bcd7\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///ecc39c67-ad7a-43fe-bdcd-cc5a913b24e7\",\"moduleSequenceNumber\":1284}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9ac0ef63-4c76-457e-9c00-2199640b9670\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///0ee8c92f-76ce-410c-b5cf-67aaac447388\",\"moduleSequenceNumber\":1285}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///350470f9-f5fc-4965-b036-81290903d254\",\"moduleSequenceNumber\":795},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///ea528b28-e62d-4945-9a99-bcfc35490c3a\",\"moduleSequenceNumber\":1286}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv10\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv11\",\"httpPortOpen\":true,\"ip\":\"92.3.6.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv11\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv11\",\"moduleSequenceNumber\":819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv11\",\"moduleSequenceNumber\":820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c9e65d4f-5920-48d3-a6a4-7b50c246cfc8\",\"moduleSequenceNumber\":3935},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///424de1af-2740-487f-a4c3-36390a973a8a\",\"moduleSequenceNumber\":3935},{\"filename\":\"run.js\",\"url\":\"blob:file:///d7bf08e8-570a-4263-ad8e-4e63adec354f\",\"moduleSequenceNumber\":5505}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv11\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv11\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b2eb2b6d-aabe-4e7c-b867-e06441a82593\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///f024a6c1-8ece-49f0-a4dc-168e5772c268\",\"moduleSequenceNumber\":1288}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4274c783-f961-47a6-9015-d9656f07f002\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///b6292de1-a234-446c-b9ab-a7207f42fe48\",\"moduleSequenceNumber\":1292}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ee71c202-db9c-423f-bdd5-a99370c2dfa6\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///528eb6eb-3431-42a9-b695-f34b3686b793\",\"moduleSequenceNumber\":1291}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f71cb138-3981-4141-9691-43af54d22e83\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///4479d820-1c9e-4018-abf0-876cefd23eb6\",\"moduleSequenceNumber\":1293}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ddef7c81-52aa-4e85-bca4-6d08a9ed3600\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///382035f1-565e-40d8-b8b7-5a6e62ba12d4\",\"moduleSequenceNumber\":1290}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///d54b4126-f753-4b2f-a723-108e6785082b\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///1ac41d55-6285-41e2-9c84-035690786049\",\"moduleSequenceNumber\":1287}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///26a73335-27ff-45dd-8783-6d58795dc4db\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///f1eb3577-155a-4e17-bfaa-d2b542134044\",\"moduleSequenceNumber\":1289}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///cfbbf581-1e80-4046-892d-d2c63b06d48c\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///21cf65b1-6da4-4bb0-82f6-ddc33cf02470\",\"moduleSequenceNumber\":1294}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a8b6c3be-fae6-41ab-9fae-4a8497fbf259\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///7054c3db-3926-40bf-82cc-84eea40d257d\",\"moduleSequenceNumber\":1295}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8b94d2f3-6f40-409e-b15f-9525b5c02003\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///b07d36fb-0a8e-4385-a833-e6f40177b4ba\",\"moduleSequenceNumber\":1296}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///738a09cc-d9e2-40d5-b448-bf526c020800\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///a0c1e752-d3ea-48e6-9834-a51cd6f57cdf\",\"moduleSequenceNumber\":1297}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///661bacdc-df01-41ed-9af9-7c77585da45c\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///4437dd19-d635-424d-b405-d8e145c8bac0\",\"moduleSequenceNumber\":1298}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0169008a-fc82-4f84-83ed-44eafe2bc6ab\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///033cae14-477d-4179-8436-339568569c48\",\"moduleSequenceNumber\":1299}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a5da2e7a-3084-4932-baad-34224b95f339\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///55341f60-763e-470b-b084-2a3199e4f0a3\",\"moduleSequenceNumber\":1300}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///eca54c65-71ea-435a-9956-1cb8cf306882\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///ce3e5652-2d06-4391-b96b-4884a71e44f3\",\"moduleSequenceNumber\":1301}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0e9f8f81-05f3-4c19-9aec-40815319bf8d\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///2aedcdae-6b88-4426-9ac5-07cfa21a9231\",\"moduleSequenceNumber\":1302}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///68241b20-09ce-4d4f-8bcb-5d2ad45991a3\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///9deb51d9-889e-4883-a4a8-e1c290d2f856\",\"moduleSequenceNumber\":1303}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///3f1901a5-14f0-4363-9956-2045d0b1d6f9\",\"moduleSequenceNumber\":818},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///fdae735b-576d-461e-b308-d1d4616e7488\",\"moduleSequenceNumber\":1304}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv11\",\"moduleSequenceNumber\":840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv12\",\"httpPortOpen\":true,\"ip\":\"87.9.3.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv12\",\"moduleSequenceNumber\":841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv12\",\"moduleSequenceNumber\":842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv12\",\"moduleSequenceNumber\":843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ed1f23ab-c939-4867-805e-57b2be7a7642\",\"moduleSequenceNumber\":3945},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///90d7e1f3-3283-43fd-be6b-21144692d815\",\"moduleSequenceNumber\":3945},{\"filename\":\"run.js\",\"url\":\"blob:file:///f7967da1-43c2-42bb-a1cb-caab0cc6f253\",\"moduleSequenceNumber\":5978}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv12\",\"moduleSequenceNumber\":844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv12\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9f5c678f-523b-4688-8f74-1957a73bc74f\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///0b97db97-bd4e-4667-8f27-612236d31823\",\"moduleSequenceNumber\":1306}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5ad67049-5645-448b-b3fc-39b3f8e5a86e\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///434f099b-e94a-461c-b85b-ea771c506319\",\"moduleSequenceNumber\":1310}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ff884f58-826b-452a-a1bf-0ab85f425283\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///30b0d377-50d2-4bc8-9d7f-3e4d98908061\",\"moduleSequenceNumber\":1309}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///05d015e8-d6f1-4ae4-9827-dcd9e1883b9d\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///2178e06f-67c4-4dd6-860c-24104daa093b\",\"moduleSequenceNumber\":1311}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///be17c92f-5879-48e4-ac93-ea5ea0623ddf\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///9d601559-30e2-4f30-a0bb-270f8ef914ed\",\"moduleSequenceNumber\":1308}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///423822a4-5780-4613-941e-29e83d812bc0\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///06aba59d-2900-402b-9d09-26fc30a3f353\",\"moduleSequenceNumber\":1305}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///85540c96-b27a-444d-be9f-f7e567706db2\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///bcd1bb8b-fb7b-4e1d-a9bb-22b7a90f8571\",\"moduleSequenceNumber\":1307}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///cefa13fc-635d-4650-a8d6-3cf0ece3903a\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///f1e09b20-44b9-42a6-95bd-8bd95002a6f5\",\"moduleSequenceNumber\":1312}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9a80c501-8385-4f4e-a08d-95cdb4837adb\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///80b18726-730e-4d52-a7f9-816810dc4025\",\"moduleSequenceNumber\":1313}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5c6997a7-381b-40c3-b698-2c38eb864dbd\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///e7635f70-6e1c-4ea9-860e-0916578a8a51\",\"moduleSequenceNumber\":1314}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f64cba1f-842d-402a-a0a0-0eadb0a43add\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///978a9559-1373-4077-9920-6d0d9abc246e\",\"moduleSequenceNumber\":1315}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///cdaa6927-714c-4ac4-9c5c-8fe49ede3712\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///ad80131e-2c57-47b5-80b2-d547fcb49e8f\",\"moduleSequenceNumber\":1316}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///50c0a2ea-ee43-417b-85da-d1eab7b17b4c\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///74c7f629-b056-4561-b912-c2d07f683ddc\",\"moduleSequenceNumber\":1317}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///53e5a879-7f08-4be5-8d03-54d65068153c\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///23e1a44c-10e9-4f43-a6a8-89541083e255\",\"moduleSequenceNumber\":1318}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ba4fffd6-05c3-4a4e-863e-8ceff7742579\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///4308b6bf-dc9a-4a66-a859-151e6f1ee369\",\"moduleSequenceNumber\":1319}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///11fc0065-c064-432a-891e-3408ae7f6a26\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///da4fee46-58d7-4f2c-ab3f-4875c7414801\",\"moduleSequenceNumber\":1320}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5b21d92a-a0a6-4265-822e-dcd50058af2a\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///331fd599-c16f-47b9-ac24-cf9da2ed1338\",\"moduleSequenceNumber\":1321}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///021c77ee-a610-4996-a948-b915207e8505\",\"moduleSequenceNumber\":841},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///ea2e4510-800f-4044-bf36-ec7c4cf5d749\",\"moduleSequenceNumber\":1322}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv12\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"serv0\",\"httpPortOpen\":true,\"ip\":\"60.9.9.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv0\",\"moduleSequenceNumber\":864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv0\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8079648b-51a9-410d-b9aa-d869191a0214\",\"moduleSequenceNumber\":3825},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ecc76192-e960-4091-8245-a52038222759\",\"moduleSequenceNumber\":3825},{\"filename\":\"run.js\",\"url\":\"blob:file:///301c7577-dfd0-4818-84a2-17727946a16f\",\"moduleSequenceNumber\":4280}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv0\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv0\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///804c7817-6059-45a4-8a1a-42bcb12efcb9\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///79b3d33f-635a-46eb-b382-16ade058845d\",\"moduleSequenceNumber\":1324}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///18a822c1-2ae8-4764-a42c-ef3e1b7621b2\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///0e93d72c-9c4f-407a-a4cb-a84b74e15cf0\",\"moduleSequenceNumber\":1328}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///61bef57e-3a31-4015-b283-4c9528de71e3\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///f0e411a0-db35-4b33-8443-b80b45121693\",\"moduleSequenceNumber\":1327}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///69af6fd1-c956-4749-9c0d-ace8d8bff9b6\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///a5a9aa34-4ad1-4c82-8ede-18c54062d606\",\"moduleSequenceNumber\":1329}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///19a21cb5-1d82-4d2d-8bdd-5f8cd990f637\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///b0f51d6e-4baa-44cf-b28a-f2b57d572bb4\",\"moduleSequenceNumber\":1326}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///1e096f38-8877-470e-ba8c-e47a12ae8971\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///202d68fb-f4fd-47b0-936c-70a7913fec16\",\"moduleSequenceNumber\":1323}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0af566d3-a3f3-42c4-95d2-e4c04634c98b\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///1ed09ce7-fdf3-4759-bc1d-d2a9f831d974\",\"moduleSequenceNumber\":1325}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv0\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///31232c0e-9be7-4159-93ee-13033e2579df\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///56a52b26-1ef9-4e5b-9707-89d15da8ebf6\",\"moduleSequenceNumber\":1330}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///49a9b682-8bae-4998-a2b0-c7aa0f339181\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///9ab92305-6428-41cb-813b-79d02060d073\",\"moduleSequenceNumber\":1331}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9f42657a-00e7-44e7-9a52-86005cabcb60\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///9e8b34de-147c-421b-b026-970f0c977796\",\"moduleSequenceNumber\":1332}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e0119195-e617-4b90-b108-5a2eb1fb0c83\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///58d0d9b3-33a7-4cea-b460-a115adfc9838\",\"moduleSequenceNumber\":1333}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///3be9a289-28d3-4018-9fcd-b3167beaf2b2\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///6b8769b9-d962-42ae-8cf0-e78143d7aa58\",\"moduleSequenceNumber\":1334}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ecabcbe0-8781-422d-8697-6221dc2059e0\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///296abdc2-84d1-4790-9cd4-5991d62891c8\",\"moduleSequenceNumber\":1335}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///37ba8281-f629-4e54-ab70-7524b66c456b\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///29f69889-c9d4-458e-80bc-f55adc24acd1\",\"moduleSequenceNumber\":1336}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///3b39d63b-093b-4a86-b5ac-5cef5d7e1f79\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///4dcec9ca-901d-41b2-ad9e-e5eb944e9ebc\",\"moduleSequenceNumber\":1337}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a5d1fe71-385b-499e-a45e-b7c9cc5e9319\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///48fcd341-de76-4053-84d8-62c42e925b90\",\"moduleSequenceNumber\":1338}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b6faa982-f991-450e-b4f8-d2a24f81019e\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///fe65e166-1394-47f7-a115-055ccc5b87ee\",\"moduleSequenceNumber\":1339}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///87e9f90e-1814-4f62-a0c0-03c2aeed9bc7\",\"moduleSequenceNumber\":875},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///3a36d8db-54a5-4a23-b761-c082cb025def\",\"moduleSequenceNumber\":1340}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv0\",\"moduleSequenceNumber\":886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"serv13\",\"httpPortOpen\":false,\"ip\":\"98.6.9.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv13\",\"moduleSequenceNumber\":887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv13\",\"moduleSequenceNumber\":888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv13\",\"moduleSequenceNumber\":889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///2a5465d0-a072-41d5-b874-14ed2307732e\",\"moduleSequenceNumber\":3955},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///25a6fe76-bbf3-442b-a1bc-ab24a3a7a342\",\"moduleSequenceNumber\":3955},{\"filename\":\"run.js\",\"url\":\"blob:file:///da1431b7-3e98-416f-a4f1-2152b6d3d319\",\"moduleSequenceNumber\":6037}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv13\",\"moduleSequenceNumber\":890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv13\",\"moduleSequenceNumber\":891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7c5cee6e-75af-474b-8769-034c065f1325\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///9a099044-954b-444e-a7fd-1620cb240501\",\"moduleSequenceNumber\":1341}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5af0ed1f-ced0-4b93-b267-a99e233623b7\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///1652189a-6742-4ace-b446-4c1fe8bf3f6d\",\"moduleSequenceNumber\":1342}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///3e70113d-aa8a-4966-9695-5e2a1163b6c0\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///a023a790-ff83-401e-876b-79a4bcbff673\",\"moduleSequenceNumber\":1343}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///be10c588-0437-4b11-ba6a-e02e84c38abd\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///3cb30dc4-22da-40dd-8810-1fa28eb69741\",\"moduleSequenceNumber\":1344}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///295f4c2f-16d5-4305-84a0-0398e34522f5\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///4def98f5-e863-4f57-97ac-4801a86dc341\",\"moduleSequenceNumber\":1345}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ea15104f-d123-416e-90f7-46c3dc935006\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///cd097339-e69c-4900-8338-099722d46053\",\"moduleSequenceNumber\":1346}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///096aae90-a931-412f-83a5-9ce5d9051f38\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///ffc7b5ec-edd1-4e6b-8b93-b11c33f511aa\",\"moduleSequenceNumber\":1347}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8d751704-b451-42bb-814e-2b71c4b65195\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///3ed8ce23-d2ac-44f4-b1a4-672a37810c10\",\"moduleSequenceNumber\":1348}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0d1bd775-0e53-4590-b86c-4df7544afae0\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///32eb9a57-ebf8-4092-ab82-b72a8428a33e\",\"moduleSequenceNumber\":1349}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a6a85057-2123-4651-8df7-2f6c873f50f7\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///bdeae188-c430-4a90-b3f2-20cf2c905212\",\"moduleSequenceNumber\":1350}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7636d376-b7f1-48ec-aa22-0eb625b9d2c1\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///fb575fa2-554e-4752-a568-e9d9880da369\",\"moduleSequenceNumber\":1351}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8553572d-fa60-43ed-b911-26eabeb49836\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///225b8574-6f67-4733-9457-b9f2096c961e\",\"moduleSequenceNumber\":1352}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e2aab938-3767-4747-ac0d-eb8d65ad0de9\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///8d69310d-0622-4382-bc75-d02ef23bd191\",\"moduleSequenceNumber\":1353}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///32cc26bf-a16a-43b8-80cd-936f50842fdf\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///eaae5f27-ad05-46f7-9d67-65df8a2c92c4\",\"moduleSequenceNumber\":1354}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8183839f-5a11-4038-97d3-04bff898d61b\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///af9692a2-e0a7-4def-9794-6b90a9717f00\",\"moduleSequenceNumber\":1355}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0df45393-e2c7-4355-9d6f-bb7ca335fd3d\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///625e0a00-9a20-4a12-bb26-00086759106e\",\"moduleSequenceNumber\":1356}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4323ac2e-a8a2-4256-bfd1-5c4cba23310e\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///ff456fc3-bf0f-40ef-b629-c35e7c9c0e18\",\"moduleSequenceNumber\":1357}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5b4379a4-531c-4f74-9fc4-28866c5f8e08\",\"moduleSequenceNumber\":887},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///5de16daa-ef3e-4a00-a2fe-c621aa59bea0\",\"moduleSequenceNumber\":1358}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv13\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"serv14\",\"httpPortOpen\":false,\"ip\":\"92.1.5.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv14\",\"moduleSequenceNumber\":910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv14\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv14\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///725a932d-3eec-426a-9f4a-970a4b239223\",\"moduleSequenceNumber\":3965},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///864e0c9a-6ab4-41ae-ab5c-3c9814868c86\",\"moduleSequenceNumber\":3965},{\"filename\":\"run.js\",\"url\":\"blob:file:///f3362686-92a9-4938-82c5-9ee7f5bb12bd\",\"moduleSequenceNumber\":6110}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv14\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv14\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///cc3289f6-27df-4d89-8907-57d56a5b955b\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///b90459e1-4f3b-42a3-be3a-423f5cef9a62\",\"moduleSequenceNumber\":1359}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a3deefa1-faea-4b4c-ab53-4e6962e327cc\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///23ebf0f4-8db3-4abf-9708-1f40523d6807\",\"moduleSequenceNumber\":1360}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///931421d6-62ae-4779-8bef-4351850d9c0c\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///2b28679d-cd61-49ab-afc9-7093f7537b33\",\"moduleSequenceNumber\":1361}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ddcb4154-892f-4f73-b63a-5ed2f17bcd73\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///bb74ad37-1e01-4440-9124-dd47831e2ff3\",\"moduleSequenceNumber\":1362}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///691b1801-f2a8-4dea-8227-13f624eef8d6\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///b0ce35bc-d351-4383-b0a6-7ee7a47aa5a4\",\"moduleSequenceNumber\":1363}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///cfad3fe0-7c49-4bc3-89fb-9c6528216d7e\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///65c679d8-92a0-49e8-ade3-b53a414e943e\",\"moduleSequenceNumber\":1364}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f406980a-644e-48b3-a508-a74c45e819d3\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///b534f408-9ec3-4c7d-a21c-d242484141ca\",\"moduleSequenceNumber\":1365}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///abed4b9d-931b-401b-9893-68acb278ecb4\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///e11764cf-5a94-4b02-9f5c-6594d8ed5f67\",\"moduleSequenceNumber\":1366}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c7b9f146-41cb-40dd-90d5-b1ea61b2edfc\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///a6bcd08a-9cc9-49cc-ba44-dfaa21162384\",\"moduleSequenceNumber\":1367}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///d7dcb30b-2d35-4d39-9722-5f6a7fc1f41e\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///9510fd90-22e1-43e8-83bb-2817327060c4\",\"moduleSequenceNumber\":1368}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///190ca07c-d333-450a-ba6b-0813b9706038\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///99bafb9a-6237-4f7b-a0a5-a818609e930d\",\"moduleSequenceNumber\":1369}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8a35563f-5c0c-41ce-ac04-7123c421ccde\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///ffbf0ccc-5fd8-4a81-90b7-f555c217039b\",\"moduleSequenceNumber\":1370}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///2bf7e2f0-c572-4c18-957c-044e37608d3e\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///2e374f6e-07a8-4a73-9867-1f9185886f2e\",\"moduleSequenceNumber\":1371}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0d9820d9-9fdb-4864-8617-78ac5a14ff78\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///becd63f2-65b4-4794-a247-03570207d34c\",\"moduleSequenceNumber\":1372}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4e544910-0789-4ab3-b63d-b8da0e09b15a\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///4adb6c91-ab57-4285-bb93-543192e22881\",\"moduleSequenceNumber\":1373}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///159269eb-5309-467d-b2f3-13ff77b97ca8\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///953863e5-f9c5-4e51-93c0-6682df9da667\",\"moduleSequenceNumber\":1374}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e814d92f-3eb5-4a3c-b535-d34afb78e0d1\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///8580c152-5c58-4c76-b544-6d9bc06cacf6\",\"moduleSequenceNumber\":1375}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///040a0d7c-25e5-40f9-9c76-eb2dee011781\",\"moduleSequenceNumber\":910},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///a7b791ab-ca02-48e8-a2da-1673416ddf43\",\"moduleSequenceNumber\":1376}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv14\",\"moduleSequenceNumber\":932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"serv15\",\"httpPortOpen\":false,\"ip\":\"36.2.1.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv15\",\"moduleSequenceNumber\":933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv15\",\"moduleSequenceNumber\":934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv15\",\"moduleSequenceNumber\":935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ce15ea80-3f8f-49d4-9823-57d3327bd1d9\",\"moduleSequenceNumber\":3975},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f2750c7b-59be-4532-b7d3-9bfce90e8a86\",\"moduleSequenceNumber\":3975},{\"filename\":\"run.js\",\"url\":\"blob:file:///a4286fef-58cd-4892-942d-5a750fa3dd5e\",\"moduleSequenceNumber\":6183}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv15\",\"moduleSequenceNumber\":936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv15\",\"moduleSequenceNumber\":937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///55cfcbc1-e8bb-4fb5-9896-b909072d4d0e\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///0552be7d-b8f9-424e-8b32-e9b3335b7099\",\"moduleSequenceNumber\":1377}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///cabc8785-ae8d-4e8b-97a5-03b99afd5e9f\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///d9851aff-2daa-4a56-aef5-7c8f8456f55c\",\"moduleSequenceNumber\":1378}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///2b47124e-a4e4-4a9d-9077-4371a1f3f63b\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///a9f94f9c-ea76-4085-b7c5-e59c1d7bb57e\",\"moduleSequenceNumber\":1379}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c6bd9eb5-1314-4479-bb16-3385e954d49b\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///3e622ae6-4841-4b50-ac37-ef346b6d9392\",\"moduleSequenceNumber\":1380}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///88f6ea28-38b6-4443-9ffd-119c62780ea8\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///b7943a09-3c84-477f-bcea-8fd968c72683\",\"moduleSequenceNumber\":1381}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8fef7c04-577c-4074-901d-66de913b9b02\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///7ba04331-39ea-4378-8e2f-5f2547f89671\",\"moduleSequenceNumber\":1382}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e0df6d70-8e21-46a4-b70e-5d544c98c390\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///64f68237-64d1-48bc-a6e1-b05cf5e7d123\",\"moduleSequenceNumber\":1383}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///1b1ba504-99f0-428e-9e10-50f822bcae33\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///9b69fbb2-3a78-4f4f-9f2e-2effa8c403af\",\"moduleSequenceNumber\":1384}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///cf4cda62-31ea-452f-9552-accdad238ee3\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///c3c83c9e-a7bb-4a3f-8864-3bedfcb31ee5\",\"moduleSequenceNumber\":1385}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9387c314-30bd-4faf-83cc-40de20c2b493\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///22a966d9-667c-4ad5-8bdf-c04e4fe53d7d\",\"moduleSequenceNumber\":1386}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f781d68a-6896-400e-988a-a2f7275071a5\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///a991eb39-4c4e-45ac-b802-a5d7ad57a079\",\"moduleSequenceNumber\":1387}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b286b6cd-f8e8-4765-9d98-69b4804e8ddd\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///10b00034-8820-41b4-88d6-d6f1d56a784e\",\"moduleSequenceNumber\":1388}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4f43f928-b711-4c8c-bcbf-f96ad2481906\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///8d351a52-6e65-40df-888c-c2cb1a102eb1\",\"moduleSequenceNumber\":1389}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f240ec6d-e014-4a79-b212-a9ce3e762a48\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///62e8d970-203f-401b-be0e-44af04e74dbf\",\"moduleSequenceNumber\":1390}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///08d1cabf-7709-4151-9d73-66c7b07caad0\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///e05749a3-4839-4a07-a5ed-4f78cd8e3bec\",\"moduleSequenceNumber\":1391}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///71ea1ca8-5d51-478c-91cc-40636debc81d\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///63f2f515-20cd-47c0-92df-94af3ce7f2b4\",\"moduleSequenceNumber\":1392}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e9a04ff1-b13c-4ca8-881f-8d8eca734f45\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///03a9ddbc-4c6d-416a-8ad5-641323ac717a\",\"moduleSequenceNumber\":1393}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ff772792-673f-45a9-8df0-5245251938c1\",\"moduleSequenceNumber\":933},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///e6057e2f-cba8-4800-9c55-4cbde788a1ac\",\"moduleSequenceNumber\":1394}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv15\",\"moduleSequenceNumber\":955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"serv16\",\"httpPortOpen\":false,\"ip\":\"6.1.3.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv16\",\"moduleSequenceNumber\":956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv16\",\"moduleSequenceNumber\":957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv16\",\"moduleSequenceNumber\":958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///1f03743d-cf26-40cc-b701-447db24ad32c\",\"moduleSequenceNumber\":3985},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///221e7b9b-49cd-4ed9-aeac-7fdca5620125\",\"moduleSequenceNumber\":3985},{\"filename\":\"run.js\",\"url\":\"blob:file:///c1d9e3fb-7e72-4e0d-b1da-610abbba7492\",\"moduleSequenceNumber\":6699}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv16\",\"moduleSequenceNumber\":959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv16\",\"moduleSequenceNumber\":960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f767bdfb-3b43-4d62-a1ef-828310a8d4e5\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///db33e016-77ed-4a7b-a7ee-1fdaf9f02a9a\",\"moduleSequenceNumber\":1395}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ba7e938b-902a-47fa-98b8-d2a6372df9ba\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///e00faedb-6ed1-45ff-8f73-c80fbe623f2f\",\"moduleSequenceNumber\":1396}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///918489e0-5a29-4729-a3c8-9dbcb2bfa86c\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///9468b303-c5bb-4a6a-a322-42d5789c460c\",\"moduleSequenceNumber\":1397}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b2aa86fa-f75d-49a5-8115-ab17082361f1\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///c41b9997-a3c5-4a58-9781-5ad6a0609c51\",\"moduleSequenceNumber\":1398}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///cb954265-d2e5-4b6b-b201-ba02ba5d5034\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///fd020fac-3fa3-4fe8-a72a-0cff5d0e25f2\",\"moduleSequenceNumber\":1399}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0fba3ed3-aa56-4395-b7a1-af40ec600481\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///0b768da4-f1b1-4a76-a742-30a5ed2ec731\",\"moduleSequenceNumber\":1400}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///35a0ba78-62d4-491c-96f9-bae1527ddb1f\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///f3228eda-a7ed-4999-a283-63a93f3de435\",\"moduleSequenceNumber\":1401}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///844e9e5b-74c1-401d-b306-cd4da5c55863\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///f54eec78-0436-494d-83f6-15356c09d28e\",\"moduleSequenceNumber\":1402}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///6cdd0033-c6d7-4160-9557-9be898e10a67\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///87f7c84c-9baa-40d5-b946-e4acb96e9bc6\",\"moduleSequenceNumber\":1403}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c341fac2-e59f-4900-9014-82cf501d4670\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///395d583e-5ecc-49f5-9320-a9a95587aa71\",\"moduleSequenceNumber\":1404}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9c622ab7-8929-4e3c-a22d-b04094fdd860\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///2bde15b2-2379-441d-907c-b91304083b05\",\"moduleSequenceNumber\":1405}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///a034dfa5-fdb7-43a3-b28f-2dff5821c3ff\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///3f280aad-8a2a-4782-9179-c41d51ce26d4\",\"moduleSequenceNumber\":1406}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///38f354a4-8251-4f94-81c5-ba83c9c0e5f8\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///95bed18c-87dd-4f73-9e77-17e6a7a7dda2\",\"moduleSequenceNumber\":1407}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ddb51c58-8456-4f4a-b74f-b6142ebfba2f\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///54e51eb1-2c33-4330-bb10-c89d13dab700\",\"moduleSequenceNumber\":1408}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4897136a-7da6-42a4-9a98-346d7f384e4e\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///c7587777-df12-49a2-ab7c-8267e8e6d5bf\",\"moduleSequenceNumber\":1409}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ab75da45-a63e-4a59-9424-5198035c947a\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///9fe8ab32-744d-4f77-b1ea-855c9a66108b\",\"moduleSequenceNumber\":1410}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ef1d577e-b6d8-490c-9ce4-89aca398034d\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///5c2f7f75-ce19-47a8-b697-3a2349a4d89e\",\"moduleSequenceNumber\":1411}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///2f892a6a-5e2a-4bc0-84af-d1fc18dd2ce1\",\"moduleSequenceNumber\":956},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///86ebd415-337b-4907-b1fa-0077dbf894b2\",\"moduleSequenceNumber\":1412}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv16\",\"moduleSequenceNumber\":978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"serv17\",\"httpPortOpen\":false,\"ip\":\"27.5.6.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv17\",\"moduleSequenceNumber\":979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv17\",\"moduleSequenceNumber\":980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv17\",\"moduleSequenceNumber\":981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///26ebdb07-139c-4ae1-b2de-79f346306356\",\"moduleSequenceNumber\":3995},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7f2c79f2-e8e5-4e44-ba4c-9675a72b49e3\",\"moduleSequenceNumber\":3995},{\"filename\":\"run.js\",\"url\":\"blob:file:///c0f13fa4-fb22-4d9a-b899-fd3038d4a331\",\"moduleSequenceNumber\":6772}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv17\",\"moduleSequenceNumber\":982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv17\",\"moduleSequenceNumber\":983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9b1bfdc7-7a4d-4b9d-8001-0743619cc03b\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///c8920825-e91a-48bb-8108-7ba6ac554156\",\"moduleSequenceNumber\":1413}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e65c230d-1ca6-4f92-b4b5-91c3afede33c\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///4e316103-bf77-4d7d-b4eb-6e7fdf15ca38\",\"moduleSequenceNumber\":1414}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ecfcf649-6f06-4220-85db-5fe8bfad2aeb\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///431de14b-0194-4b07-86be-014618e21760\",\"moduleSequenceNumber\":1415}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9cb1c435-7659-4f0e-bbab-39d264fdd96b\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///666e19fc-1334-4108-acc8-5026199fd88e\",\"moduleSequenceNumber\":1416}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b56d5e77-af4d-44a8-97cb-f2c04507dcd7\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///69f6c729-c680-4d53-86ec-8b081fcbf0a0\",\"moduleSequenceNumber\":1417}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///53455e72-fb86-459e-8b7d-a61c089a54c7\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///87497354-eebc-44c0-bb27-df1988bee9ff\",\"moduleSequenceNumber\":1418}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///3421a61d-50be-413d-a829-e87f3a666f47\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///0da0cd06-4cd5-4502-b744-f7ff7d063729\",\"moduleSequenceNumber\":1419}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7fd7013a-b762-47f7-824f-e3b74c08ebaf\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///c9a4ed14-2d2a-4ee7-8158-f004d99bb597\",\"moduleSequenceNumber\":1420}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///d9c2a371-49f7-4356-bead-074319ae1271\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///7d439678-c5f5-4022-8e30-343a359a07db\",\"moduleSequenceNumber\":1421}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///b5073696-4027-4b38-b9d0-7c1cf166f7f8\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///7d566b04-2ecf-45c7-b255-c38235e7eacf\",\"moduleSequenceNumber\":1422}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ee93cbd7-7a6b-44e4-b9ce-91753c09d5a9\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///fa23364a-f52a-4741-a76b-57b4fb87c22e\",\"moduleSequenceNumber\":1423}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7af5fbcb-f854-41de-a764-3c80864d352c\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///70ba4092-3814-4cd0-bd6a-d77da814b4b1\",\"moduleSequenceNumber\":1424}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///54e31a03-19ce-4f63-86a7-bc9d58e10c5d\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///9b4e455d-d72a-4703-b045-54194aace473\",\"moduleSequenceNumber\":1425}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///59a1b826-1c32-4e20-a741-5c4fb2cf36bd\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///0909da90-753d-486d-968b-401d09373fd1\",\"moduleSequenceNumber\":1426}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///324ec06b-f46d-4d20-850c-2f3b6126ae07\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///126234bd-6e2f-428f-8353-1fcc8f9abd4e\",\"moduleSequenceNumber\":1427}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///8a37dfd8-8fa9-487d-ae47-9daf8bace77e\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///68dc922b-b6aa-4d23-9b74-c7b045b58c5f\",\"moduleSequenceNumber\":1428}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c01260c2-9ee7-4585-a16f-b338440afe93\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///186d195e-7e6c-441d-b4c1-788b9520c3a0\",\"moduleSequenceNumber\":1429}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":1000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e0b9bb7b-4927-4870-9606-cd24bf29be0a\",\"moduleSequenceNumber\":979},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///65488a58-4aa9-4bda-b867-1974bf5ac3cc\",\"moduleSequenceNumber\":1430}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv17\",\"moduleSequenceNumber\":1001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"serv18\",\"httpPortOpen\":false,\"ip\":\"44.7.1.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv18\",\"moduleSequenceNumber\":1002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv18\",\"moduleSequenceNumber\":1003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv18\",\"moduleSequenceNumber\":1004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ab971169-a8e0-4b1e-963b-39fe95ec1cb2\",\"moduleSequenceNumber\":4005},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///89f74508-3fee-4207-821b-3d892cd2eada\",\"moduleSequenceNumber\":4005},{\"filename\":\"run.js\",\"url\":\"blob:file:///917bbf6b-8fae-4a7c-b1a3-a71664a3cf7b\",\"moduleSequenceNumber\":6845}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv18\",\"moduleSequenceNumber\":1005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv18\",\"moduleSequenceNumber\":1006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ae6e7e77-a32a-4f8b-a279-de9a75b5833f\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///55951987-cfdc-4cec-a422-fee698219365\",\"moduleSequenceNumber\":1431}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///2aed054d-6e89-4fde-a902-2ac5f9e8da07\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///4656c6f6-7b65-417d-9b86-fca7fbe723b6\",\"moduleSequenceNumber\":1432}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///de28f966-2894-410b-8b40-fd9464783e01\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///ec3fc150-157d-4aa5-beef-9fd73167e697\",\"moduleSequenceNumber\":1433}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///583c8a42-903a-486a-a9a3-3e6354dfe968\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///4ebaffe0-29fb-4e0b-a43d-8b2e4809c2ed\",\"moduleSequenceNumber\":1434}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///73f62d48-5a36-420b-bbc6-8a507c6e077d\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///b1dd08b3-7509-473a-a97d-6a86d8eb9905\",\"moduleSequenceNumber\":1435}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9d9cb13f-cd0a-40a9-9708-6233f0cffb19\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///ddc58611-0122-4053-b53f-c731fc211032\",\"moduleSequenceNumber\":1436}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///6db77a84-04fe-4c92-a9c4-e081aca92590\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///82c55303-2080-42e5-a588-bc188d4e8f2d\",\"moduleSequenceNumber\":1437}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9c4d1a26-f217-492b-8728-c7fb3fe6c0f7\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///229a96d9-d4b8-47bb-8490-eaef6a52dc74\",\"moduleSequenceNumber\":1438}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///6f1047ab-8977-4a2a-bce3-b38f8b6dc06e\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///2fe69d5f-9aa1-427e-9183-b30851b5b5de\",\"moduleSequenceNumber\":1439}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7d0de4d9-8b01-4b72-926a-1c39b1fb6f68\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///8af466d8-89f1-4ae4-8ebd-eac79c6b7707\",\"moduleSequenceNumber\":1440}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e8cec34e-d58e-449a-8c60-555f2cbff991\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///68860afa-40bb-4c49-9be9-5e5e0705803d\",\"moduleSequenceNumber\":1441}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///47a9dc6b-6c8a-4200-a905-0376609dd6b4\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///0afcf664-037a-4981-b4b2-118d01295e10\",\"moduleSequenceNumber\":1442}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///96551e32-25e1-4516-878d-4fb8849dfa79\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///80aedabd-3cbd-4676-aa2a-0307758a9d78\",\"moduleSequenceNumber\":1443}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///2de9e7f6-238e-4463-a305-f09a4d20c66d\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///6fe36bdb-e7b2-4497-96ee-12cf376b2344\",\"moduleSequenceNumber\":1444}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9d674416-6e43-4c20-9238-43cf019fe20b\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///da56bbc3-aff3-4c2b-9b93-400033c693a2\",\"moduleSequenceNumber\":1445}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5cb234e4-c132-495f-9e3e-c2ab7cc15aec\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///1a41bd11-0fc0-43f3-a846-8f76fb679b8d\",\"moduleSequenceNumber\":1446}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5d0a5d96-b1c7-4c96-bb7c-4ed86767ca57\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///e8c75ec4-aba1-4d65-b043-1c3b1fc7dd37\",\"moduleSequenceNumber\":1447}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f7cbd040-0d42-4393-b576-c80168dc5f13\",\"moduleSequenceNumber\":1002},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///0fda2d7b-4106-4713-9411-e72430e9c875\",\"moduleSequenceNumber\":1448}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv18\",\"moduleSequenceNumber\":1024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"serv19\",\"httpPortOpen\":false,\"ip\":\"83.7.4.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv19\",\"moduleSequenceNumber\":1025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv19\",\"moduleSequenceNumber\":1026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv19\",\"moduleSequenceNumber\":1027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///fb7c5931-8efb-4574-9cc0-7abd79c2959b\",\"moduleSequenceNumber\":4015},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///6090631f-9335-4d63-9131-e8479549a74b\",\"moduleSequenceNumber\":4015},{\"filename\":\"run.js\",\"url\":\"blob:file:///8578b038-da70-4a42-b065-cf53242d6632\",\"moduleSequenceNumber\":6918}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv19\",\"moduleSequenceNumber\":1028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv19\",\"moduleSequenceNumber\":1029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///000d6d1e-aaf1-4cd5-9b5d-932d513705cc\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///d1155fa5-0376-42de-be50-03ce33d7d197\",\"moduleSequenceNumber\":1449}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0bff6220-b4d8-4b54-8f8f-255684d344b1\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///b8cd7b4c-301b-4d71-909d-336cea7af55e\",\"moduleSequenceNumber\":1450}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///400bf07c-b4ff-4541-8456-b6033a6b4d6c\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///ab352004-0f13-4e4d-988f-1df097f8b2d2\",\"moduleSequenceNumber\":1451}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7b773dd9-bae7-4bec-8423-2640ee2def18\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///1ee930df-8a74-43c3-873c-f0b5fb3ac75e\",\"moduleSequenceNumber\":1452}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///1b99a48d-39d4-4e33-a46f-f4a29c41397d\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///26155817-adaf-4a2b-a46a-d48c80dffde9\",\"moduleSequenceNumber\":1453}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///435ac657-520e-49fd-aefb-ad7cacd5c4a7\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///ee250731-536a-453b-ae1e-3483b121aa2e\",\"moduleSequenceNumber\":1454}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///0c07aa8d-5773-4260-8688-9ab9765e0bb8\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///e87832b6-c060-409e-9977-f202743dff56\",\"moduleSequenceNumber\":1455}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///d29adc28-1ba9-46be-92dd-656103b4099f\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///ccc8b91a-7eed-455a-864d-ddd869e94964\",\"moduleSequenceNumber\":1456}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///d857a890-a742-44a3-8cd1-114d26fa7c24\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///b6f9f982-2f7e-4c80-929f-c86aa6116fb0\",\"moduleSequenceNumber\":1457}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///70bc76b6-8dfd-4883-89c9-cc0522d9de14\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///01f2d4dd-12e4-4427-b0bb-d88d6a5c8977\",\"moduleSequenceNumber\":1458}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///9cd0aed8-bff5-47aa-b707-f2ba56fd836c\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///7263f7b2-6936-4321-b0da-f641f3c07f06\",\"moduleSequenceNumber\":1459}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///881d4723-bf9a-4cc6-a09c-5c8db1520357\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///6e440c08-736b-4ac3-848a-d8259af8d724\",\"moduleSequenceNumber\":1460}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f6527fcd-2bc8-4397-bfb7-297c5bbeedcd\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///c4bf14c8-292c-4058-8602-dbb5067a0005\",\"moduleSequenceNumber\":1461}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///73d97ff3-a89f-4a81-b77a-f2748a9a4cc7\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///2d41310e-d65e-4bfe-8bc4-d2a96abc29a4\",\"moduleSequenceNumber\":1462}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///750baf31-8643-4970-a4b1-37db9ebd27d9\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///f3a944f6-1872-406c-b89a-26def39336cd\",\"moduleSequenceNumber\":1463}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///457ed4a1-d72b-411e-8400-9730eb07cb28\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///74479105-49ee-4a62-8b62-c8a90e902889\",\"moduleSequenceNumber\":1464}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///30ab8aab-0ae2-4d3c-b037-121d0e0db862\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///d44e062a-3933-4f6d-9e6f-1b8132917af8\",\"moduleSequenceNumber\":1465}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c19898b0-1fe5-448b-9f9e-ec29e51f1807\",\"moduleSequenceNumber\":1025},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///afe608df-8b5a-4f1d-8ca9-7fc797ddbfb3\",\"moduleSequenceNumber\":1466}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv19\",\"moduleSequenceNumber\":1047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"serv20\",\"httpPortOpen\":false,\"ip\":\"27.3.5.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/** just to test methods */\\n\\tawait writeHxScripts(ns);\\n}\\n\\nexport async function updateHackableTargets(ns) {\\n\\tvar file = ns.read(\\\"targets.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar hackable = getHackable(targets);\\n\\tawait writeNewFile(hackable);\\n\\n\\t/** functions */\\n\\tfunction getHackable(servers) {\\n\\t\\tvar hackableServers = new Array(servers.length);\\n\\t\\tvar index = 0;\\n\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tvar server = servers[i];\\n\\t\\t\\tif(ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n\\t\\t\\t\\thackableServers[index] = server;\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn shrink(hackableServers, index);\\n\\n\\t\\tfunction shrink(servers, size) {\\n\\t\\t\\tvar shrunken = new Array(size);\\n\\t\\t\\tfor(var i = 0; i < size; i++) {\\n\\t\\t\\t\\tshrunken[i] = servers[i];\\n\\t\\t\\t}\\n\\t\\t\\treturn shrunken;\\n\\t\\t}\\n\\t}\\n\\n\\tasync function writeNewFile(servers) {\\n\\t\\tvar content = \\\"\\\";\\n\\t\\tfor(var i = 0; i < servers.length; i++) {\\n\\t\\t\\tcontent = content.concat(servers[i]);\\n\\t\\t\\t\\n\\t\\t\\tif(i !== (servers.length-1)) {\\n\\t\\t\\t\\tcontent = content.concat(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.write(\\\"targets_hackable.txt\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function writeHxScripts(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tawait writeNewFile(targets[i]);\\n\\t}\\n\\n\\tasync function writeNewFile(server) {\\n\\t\\tns.tprint(\\\"Write new hx file for \\\" + server);\\n\\n\\t\\tvar content = \\\"/** @param {NS} ns **/\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"import {hackServer} from 'controlCenter.js';\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"export async function main(ns) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\twhile(true) {\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t\\\\tawait hackServer(ns, '\\\" + server + \\\"');\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"\\\\t}\\\\n\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"}\\\\n\\\";\\n\\n\\t\\tawait ns.write(\\\"/hx/\\\" + server + \\\".js\\\", content, \\\"w\\\");\\n\\t}\\n}\\n\\nexport async function hackServer (ns, server) {\\n\\tif (ns.hackAnalyzeChance(server) < 0.80 || ns.getServerSecurityLevel(server) > 20) {\\n\\t\\tawait ns.weaken(server);\\n\\t} else if ( (ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server) ) < 0.75) {\\n\\t\\tawait ns.grow(server);\\n\\t}else {\\n\\t\\tawait ns.hack(server);\\n\\t}\\n}\",\"filename\":\"controlCenter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"serv20\",\"moduleSequenceNumber\":1048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\tfor (var i = 0; i < targets.length; i++) {\\n\\t\\tvar server = targets[i];\\n\\n\\t\\tvar money = ns.getServerMoneyAvailable(server);\\n\\t\\tvar maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tvar moneyPercentage = Math.round((money / maxMoney) * 100);\\n\\t\\tvar rootAccess = ns.hasRootAccess(server);\\n\\t\\tvar security = Math.round(ns.getServerSecurityLevel(server));\\n\\t\\tvar hackingTime = Math.round(ns.getHackTime(server) / 1000);\\n\\t\\tvar anaylzeChance = Math.round(ns.hackAnalyzeChance(server) * 100);\\n\\n\\t\\tns.tprint(server + \\\":\\\");\\n\\t\\tns.tprint(\\\"\\\\troot: \\\" + rootAccess +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmoney: \\\" + money + \\\" (\\\" + moneyPercentage + \\\"%)\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tmaxMoney: \\\" + maxMoney +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\tsecurity: \\\" + security +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackTime: ~ \\\" + hackingTime + \\\"s\\\" +\\n\\t\\t\\t\\\"\\\\n\\\\t\\\\t\\\\thackChance: ~ \\\" + anaylzeChance + \\\"%\\\");\\n\\t}\\n}\",\"filename\":\"serverInfos.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"serv20\",\"moduleSequenceNumber\":1049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n\\tawait updateHackableTargets(ns);\\n\\tvar file = ns.read(\\\"targets_hackable.txt\\\");\\n\\tvar targets = file.split(\\\"\\\\n\\\");\\n\\n\\t\\n\\tfor(var i = 0; i < targets.length; i++) {\\n\\t\\tinstaller(targets[i]);\\n\\t}\\n\\n\\tfunction installer(server) {\\n\\t\\tns.tprint(server + \\\" installing...\\\");\\n\\t\\tns.brutessh(server);\\n\\t\\tns.ftpcrack(server);\\n\\t\\tns.relaysmtp(server);\\n\\t\\tns.httpworm(server);\\n\\t\\tns.sqlinject(server);\\n\\t\\tns.nuke(server);\\n\\t\\t/**ns.installBackdoor(server);**/\\n\\t}\\n}\",\"filename\":\"install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"serv20\",\"moduleSequenceNumber\":1050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {updateHackableTargets} from \\\"controlCenter.js\\\";\\nimport {writeHxScripts} from \\\"controlCenter.js\\\";\\n\\nexport async function main(ns) {\\n    /** RAM */\\n    if (ns.args[0] == null) {\\n        ns.tprint(\\\"Please enter RAM size in GB as argument\\\");\\n    } else {\\n        var serverRam = ns.args[0] - ns.getScriptRam(\\\"run.js\\\");\\n\\n        /** getTargets */\\n        await updateHackableTargets(ns);\\n        var file = ns.read(\\\"targets_hackable.txt\\\");\\n        var targets = file.split(\\\"\\\\n\\\");\\n\\n        /** createFiles */\\n        await writeHxScripts(ns);\\n\\n        /** calculate RAM */\\n        const fileRam = ns.getScriptRam(\\\"/hx/\\\" + targets[0] + \\\".js\\\");\\n\\n        const threadsPerFile = Math.floor((serverRam / fileRam) / targets.length);\\n        const restRam = serverRam - (threadsPerFile * targets.length * fileRam);\\n        var addXtraThread = Math.floor(restRam / fileRam);\\n\\n        if(threadsPerFile > 0) {\\n            for(var i = 0; i < targets.length; i++) {\\n                var file = \\\"/hx/\\\" + targets[i] + \\\".js\\\";\\n\\n                if(addXtraThread > 0) {\\n                    await ns.run(file, threadsPerFile + 1);\\n                    addXtraThread--;\\n                } else {\\n                    await ns.run(file, threadsPerFile);\\n                }\\n            }\\n        } else {\\n            ns.tprint(\\\"Not enough RAM\\\");\\n        }\\n    }\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///82ee0808-206b-486d-90f0-b2482ea93c41\",\"moduleSequenceNumber\":4025},{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///00f1a74d-e45f-4a7c-9cab-ac93b7df11b1\",\"moduleSequenceNumber\":4025},{\"filename\":\"run.js\",\"url\":\"blob:file:///f9677037-dfd7-4b35-8dda-11f842d80880\",\"moduleSequenceNumber\":6991}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"serv20\",\"moduleSequenceNumber\":1051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n    const url = \\\"https://raw.githubusercontent.com/ManuelClever/bitburner/main/src/\\\";\\n    \\n    for(var i = 0; i < ns.args.length; i++) {\\n        var server = ns.args[i];\\n        ns.tprint(\\\"Downloading for \\\" + server);\\n\\n        await ns.wget(url + \\\"controlCenter.js\\\", \\\"controlCenter.js\\\", server);\\n        await ns.wget(url + \\\"serverInfos.js\\\", \\\"serverInfos.js\\\", server);\\n        await ns.wget(url + \\\"install.js\\\", \\\"install.js\\\", server);\\n        await ns.wget(url + \\\"run.js\\\", \\\"run.js\\\", server);\\n        await ns.wget(url + \\\"download.js\\\", \\\"download.js\\\", server);\\n        await ns.wget(url + \\\"targets.txt\\\", \\\"targets.txt\\\", server);\\n        await ns.wget(url + \\\"myserv.txt\\\", \\\"myserv.txt\\\", server);\\n\\n        await ns.wget(url + \\\"hx/foodnstuff.js\\\", \\\"/hx/foodnstuff.js\\\", server);\\n        await ns.wget(url + \\\"hx/harakiri-sushi.js\\\", \\\"/hx/harakiri-sushi.js\\\", server);\\n        await ns.wget(url + \\\"hx/hong-fang-tea.js\\\", \\\"/hx/hong-fang-tea.js\\\", server);\\n        await ns.wget(url + \\\"hx/iron-gym.js\\\", \\\"/hx/iron-gym.js\\\", server);\\n        await ns.wget(url + \\\"hx/joesguns.js\\\", \\\"/hx/joesguns.js\\\", server);\\n        await ns.wget(url + \\\"hx/n00dles.js\\\", \\\"/hx/n00dles.js\\\", server);\\n        await ns.wget(url + \\\"hx/sigma-cosmetics.js\\\", \\\"/hx/sigma-cosmetics.js\\\", server);\\n    }\\n    ns.tprint(\\\"Downloads are finished\\\");\\n}\",\"filename\":\"download.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"serv20\",\"moduleSequenceNumber\":1052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'n00dles');\\n\\t}\\n}\\n\",\"filename\":\"/hx/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5f6a9683-b51c-4ca9-8836-353019e3b318\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/n00dles.js\",\"url\":\"blob:file:///17738b84-6129-494d-bf17-5e74372457a9\",\"moduleSequenceNumber\":1467}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'foodnstuff');\\n\\t}\\n}\\n\",\"filename\":\"/hx/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///1795287b-0bf7-45f8-a9f9-db26b5f747d2\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/foodnstuff.js\",\"url\":\"blob:file:///513b621d-e756-44ba-ba7d-f3d7802f6f5a\",\"moduleSequenceNumber\":1468}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'sigma-cosmetics');\\n\\t}\\n}\\n\",\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///e0d08093-6503-43f9-a0d9-90907aa39952\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/sigma-cosmetics.js\",\"url\":\"blob:file:///2765e1b2-5bf4-4d61-97a7-ecd83c158fff\",\"moduleSequenceNumber\":1469}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'joesguns');\\n\\t}\\n}\\n\",\"filename\":\"/hx/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///ef4c0dcc-39ae-455f-bd4e-68b6acab2213\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/joesguns.js\",\"url\":\"blob:file:///2a09c394-6d9d-4197-b4e0-39a06cb29ba1\",\"moduleSequenceNumber\":1470}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'hong-fang-tea');\\n\\t}\\n}\\n\",\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///edca1d88-21a9-4bb3-9d92-9fa13257c0e4\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/hong-fang-tea.js\",\"url\":\"blob:file:///b0bdee8a-d32f-4c55-97bc-c52b4d0326f2\",\"moduleSequenceNumber\":1471}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'harakiri-sushi');\\n\\t}\\n}\\n\",\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///7ce515fe-242b-43b2-b7e3-757be4b86d5c\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/harakiri-sushi.js\",\"url\":\"blob:file:///1cd68942-3481-4f2d-91c0-eccab856fd3f\",\"moduleSequenceNumber\":1472}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'iron-gym');\\n\\t}\\n}\\n\",\"filename\":\"/hx/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4bcb976e-c10a-4b00-8dc3-841763625304\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/iron-gym.js\",\"url\":\"blob:file:///21597f7e-3211-4ffe-a7c4-7ff2ebcd6f52\",\"moduleSequenceNumber\":1473}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'CSEC');\\n\\t}\\n}\\n\",\"filename\":\"/hx/CSEC.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///64176559-55fd-4622-9ad3-379d319183f2\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/CSEC.js\",\"url\":\"blob:file:///62b4ff2b-81ac-46ba-861e-75cd83cf2bb3\",\"moduleSequenceNumber\":1474}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'neo-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/neo-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///44067ca6-958b-4de6-9943-0d8a12798139\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/neo-net.js\",\"url\":\"blob:file:///e1f64bb9-0945-4154-b476-cea5a1248132\",\"moduleSequenceNumber\":1475}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'zer0');\\n\\t}\\n}\\n\",\"filename\":\"/hx/zer0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///4e1f983d-765d-4f2a-a21f-3a8bd14b3dc6\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/zer0.js\",\"url\":\"blob:file:///8aadd0bd-2554-4683-9e07-503be95babc8\",\"moduleSequenceNumber\":1476}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'silver-helix');\\n\\t}\\n}\\n\",\"filename\":\"/hx/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///540dafb7-d72b-458e-9162-b275edb55236\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/silver-helix.js\",\"url\":\"blob:file:///31e461fa-c8e5-455e-bbfc-29e9e477d885\",\"moduleSequenceNumber\":1477}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'crush-fitness');\\n\\t}\\n}\\n\",\"filename\":\"/hx/crush-fitness.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///371d5f8a-1340-4391-a558-b3a4fe590923\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/crush-fitness.js\",\"url\":\"blob:file:///9add22d6-da32-427a-a179-7c35285f22db\",\"moduleSequenceNumber\":1478}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'max-hardware');\\n\\t}\\n}\\n\",\"filename\":\"/hx/max-hardware.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///be238ffb-d55b-422d-9748-e9cfd141c363\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/max-hardware.js\",\"url\":\"blob:file:///96c31adf-4d72-4f9b-9d19-87c9e83f9725\",\"moduleSequenceNumber\":1479}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'phantasy');\\n\\t}\\n}\\n\",\"filename\":\"/hx/phantasy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///f8490fcd-75fe-4efc-a972-f0603b5c156e\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/phantasy.js\",\"url\":\"blob:file:///8aae6013-f11a-48d0-8843-2c1318e824c9\",\"moduleSequenceNumber\":1480}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'johnson-ortho');\\n\\t}\\n}\\n\",\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///adeec3db-c2c8-43f3-92d5-a3356ca61092\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/johnson-ortho.js\",\"url\":\"blob:file:///70ffe8e3-ad3c-4862-a1d7-33cfca7cc38d\",\"moduleSequenceNumber\":1481}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'avmnite-02h');\\n\\t}\\n}\\n\",\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///dd889e3f-4e55-489a-bf89-8bbd286f4a9f\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/avmnite-02h.js\",\"url\":\"blob:file:///64fa81a4-829f-4f98-af61-226d3798ee16\",\"moduleSequenceNumber\":1482}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'omega-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///5cc7499c-4293-43ca-a01c-4ab51c4f391e\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/omega-net.js\",\"url\":\"blob:file:///e0f31613-3bd2-4c89-9451-02d1f5d30756\",\"moduleSequenceNumber\":1483}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {hackServer} from 'controlCenter.js';\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait hackServer(ns, 'nectar-net');\\n\\t}\\n}\\n\",\"filename\":\"/hx/nectar-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"controlCenter.js\",\"url\":\"blob:file:///c7fb8449-534a-4021-80dc-5ea1b13a2013\",\"moduleSequenceNumber\":1048},{\"filename\":\"/hx/nectar-net.js\",\"url\":\"blob:file:///ff59bb70-98cf-4ec7-ac74-f667d948bb2a\",\"moduleSequenceNumber\":1484}],\"dependents\":[],\"ramUsage\":3.3,\"server\":\"serv20\",\"moduleSequenceNumber\":1070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nsyscore\\nalpha-ent\\naerocorp\\nomnia\\nicarus\\nzb-def\\ndeltaone\\ndefcomm\\nzeus-med\\ntaiyang-digital\\nnova-med\\nzer0\\nsilver-helix\\nnetlink\\nmillenium-fitness\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nI.I.I.I\\nlexo-corp\\nglobal-pharm\\nunitalife\\nsolaris\\ninfocomm\\nomega-net\\nthe-hub\\nsummit-uni\\ncatalyst\\nrho-construction\\ngalactic-cyber\\naevum-police\\nsnap-fitness\\nnectar-net\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targets_hackable.txt\",\"text\":\"n00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\nCSEC\\nneo-net\\nzer0\\nsilver-helix\\ncrush-fitness\\nmax-hardware\\nphantasy\\njohnson-ortho\\navmnite-02h\\nomega-net\\nnectar-net\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"serv-1\",\"httpPortOpen\":false,\"ip\":\"81.3.6.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"serv\",\"httpPortOpen\":false,\"ip\":\"27.0.3.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"serv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"serv-0\",\"httpPortOpen\":false,\"ip\":\"10.7.0.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":471701.3974358986}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":241199.28802564106}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":241153.09166666673}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":238123.80000000048}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"13","AllGangsSave":"","LastExportBonus":"1642940116280","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}